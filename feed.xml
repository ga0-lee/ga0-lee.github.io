<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Garit!</title>
    <description>record, note, archive</description>
    <link>https://ga0-lee.github.io/</link>
    <atom:link href="https://ga0-lee.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 19 Jan 2023 15:31:05 +0900</pubDate>
    <lastBuildDate>Thu, 19 Jan 2023 15:31:05 +0900</lastBuildDate>
    <generator>Jekyll v4.3.1</generator>
    
      <item>
        <title>기존 git 소스를 새로운 git repo로 복사하기</title>
        <description>&lt;h2 id=&quot;기존-git-소스를-새로운-git-repo로-복사하기&quot;&gt;기존 git 소스를 새로운 git repo로 복사하기&lt;/h2&gt;

&lt;h3 id=&quot;상황&quot;&gt;상황&lt;/h3&gt;

&lt;p&gt;기존에 쓰던 git 소스를 새로운 repo로 옮겨야 하는 상황이 생겼다.  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그래서 git remote 명령어를 통해 옮겨보고자 한다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;해결-방법&quot;&gt;해결 방법&lt;/h3&gt;

&lt;p&gt;아래와 같이 git 명령어를 통해 a-repo에 있던 모든 소스를 b-repo로 옮긴다.  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# a-repo를 clone한 dir로 이동&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;a-repo

&lt;span class=&quot;c&quot;&gt;# 원격 저장소 목록을 확인하는 명령어&lt;/span&gt;
git remote
-&amp;gt; 예시 출력&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; origin

&lt;span class=&quot;c&quot;&gt;# origin이라는 원격 저장소의 url을 가져오는 명령어&lt;/span&gt;
git remote get-url origin
-&amp;gt; 예시 출력&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; https://git.com/a-repo.git

&lt;span class=&quot;c&quot;&gt;# origin이라는 원격 저장소의 url을 새로운 url로 변경하는 명령어&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# git remote set-url [원격저장소명] [new-repo-url]&lt;/span&gt;
git remote set-url orgin https://git.com/b-repo.git

&lt;span class=&quot;c&quot;&gt;# 변경됐는지 확인하는 명령어&lt;/span&gt;
git remote get-url origin
-&amp;gt; 예시 출력&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; https://git.com/b-repo.git


&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Tue, 29 Nov 2022 10:00:00 +0900</pubDate>
        <link>https://ga0-lee.github.io/posts/git-remote-set-url/</link>
        <guid isPermaLink="true">https://ga0-lee.github.io/posts/git-remote-set-url/</guid>
        
        <category>git</category>
        
        
        <category>Git</category>
        
        <category>Cases</category>
        
      </item>
    
      <item>
        <title>Nginx Ingress Controller에서 Client IP 유지하게 설정하기</title>
        <description>&lt;h2 id=&quot;nginx-ingress-controller에서-client-ip-유지하게-설정하기&quot;&gt;Nginx Ingress Controller에서 Client IP 유지하게 설정하기&lt;/h2&gt;

&lt;h3 id=&quot;상황&quot;&gt;상황&lt;/h3&gt;

&lt;p&gt;http_x_forwarded_for 헤더 값으로 Client IP를 받아와 사용하는 로직이 있는 서비스가 있다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그런데 Client IP가 Ingress Controller를 거치면서 http_x_forwarded_for 헤더 값이 Ingress Controller Pod IP로 변경되어 해당 서비스로 들어와 에러가 발생했다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그래서 Client IP가 서비스 Pod까지 유지되게 설정을 해야 한다.&lt;/p&gt;

&lt;h3 id=&quot;해결-방법&quot;&gt;해결 방법&lt;/h3&gt;

&lt;p&gt;해당 헤더 값을 유지하려면 use-forwarded-header를 true로 변경해줘야 한다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;기본 값은 use-forwarded-header: “false”다.
&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;아래와 같이 ingress-controller pod가 사용하는 ConfigMap을 변경한다.
    &lt;blockquote&gt;
      &lt;p&gt;kubectl edit cm -n ingress-nginx ingress-nginx-controller&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ConfigMap&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ingress-nginx-controller&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ingress-controller&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;allow-snippet-annaotations&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;true&quot;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# 새로 추가할 부분&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;use-forwarded-headers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;true&quot;&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;...&lt;/span&gt;  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ConfigMap을 수정하면 ingress-controller Pod에 바로 적용된다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위와 같이 적용해주면 Ingress Controller를 거쳐도 Client의 IP가 서비스 Pod까지 유지되어 http_x_forwarded_for 헤더 값에 남게 된다.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;참고&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/#use-forwarded-headers&quot;&gt;https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/#use-forwarded-headers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 28 Nov 2022 10:00:00 +0900</pubDate>
        <link>https://ga0-lee.github.io/posts/k8s-ic-use-forwarded-header/</link>
        <guid isPermaLink="true">https://ga0-lee.github.io/posts/k8s-ic-use-forwarded-header/</guid>
        
        <category>k8s</category>
        
        <category>ingress</category>
        
        
        <category>Kubernetes</category>
        
        <category>Cases</category>
        
      </item>
    
      <item>
        <title>kubectl cp 명령어 ownership 에러 해결하기</title>
        <description>&lt;h2 id=&quot;kubectl-cp-명령어-ownership-에러-해결하기&quot;&gt;kubectl cp 명령어 ownership 에러 해결하기&lt;/h2&gt;

&lt;h3 id=&quot;상황&quot;&gt;상황&lt;/h3&gt;

&lt;p&gt;kubectl cp 명령어로 bastion host에 있는 파일을 pod에 마운트 되어있는 file system 디렉토리로 복사할 때 다음과 같은 에러가 발생했다. &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;에러 내용
    &lt;blockquote&gt;
      &lt;p&gt;tar: 파일명: Cannot change ownership to uid xxxx, gid xxxx: Operation not permitted
tar: Exiting with failure status due to previous errors
command terminated with exit code 2
&lt;br /&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;해결-방법&quot;&gt;해결 방법&lt;/h3&gt;

&lt;p&gt;위 에러는 bastion host에 있던 파일을 file system으로 옮기면서 file system의 소유자로 권한을 바꿔줘야 하는데 실패해서 발생하는 에러였다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;kubectl cp 명령어를 사용할 때 파일의 소유자를 그대로 유지하는 것이 기본 값이다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그러므로 kubectl cp 명령어를 사용할 때 –no-preserve=true 파라미터를 넣어주어 파일의 소유자를 유지하지 않게 하면 된다. &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;기본 값은 –no-preserve=false 
&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sun, 27 Nov 2022 10:00:00 +0900</pubDate>
        <link>https://ga0-lee.github.io/posts/k8s-cp-ownership-error/</link>
        <guid isPermaLink="true">https://ga0-lee.github.io/posts/k8s-cp-ownership-error/</guid>
        
        <category>k8s</category>
        
        
        <category>Kubernetes</category>
        
        <category>Cases</category>
        
      </item>
    
      <item>
        <title>폐쇄망에서 terraform 사용하기</title>
        <description>&lt;h2 id=&quot;폐쇄망에서-terraform-사용하기&quot;&gt;폐쇄망에서 terraform 사용하기&lt;/h2&gt;

&lt;h3 id=&quot;상황&quot;&gt;상황&lt;/h3&gt;

&lt;p&gt;폐쇄망에서 Terraform으로 AWS에 인프라를 구성하려고 하니 아래와 같이 terraform 공식 registry에 접속할 수 없어 에러가 발생한다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/67899732/210208324-f18d144f-40e9-40bc-a1f9-cfb2706d31ca.png&quot; alt=&quot;tf-error&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그러므로 필요한 provider 패키지 바이너리 파일을 직접 다운 받아 로컬에 저장해놓고 terraform을 실행할 수 있게 해야 한다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;aws-provider-패키지-다운로드하기&quot;&gt;AWS Provider 패키지 다운로드하기&lt;/h3&gt;

&lt;p&gt;terraform에서 쓰는 provider 패키지 바이너리 파일은 아래 URL에서 다운받을 수 있다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;https://releases.hashicorp.com/terraform-provider-aws/4.48.0/&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;aws 자리에 다른 provider를 넣고 4.48.0 자리에 다른 버전을 넣어서 원하는 파일을 다운로드 할 수 있다.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;terraform-init-시-로컬-경로에서-다운받게-설정하기&quot;&gt;terraform init 시, 로컬 경로에서 다운받게 설정하기&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1.위에서 다운받은 zip 파일을 terraform을 실행하는 서버로 옮긴다.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;압축을 풀고 아래 경로로 복사한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;unzip terraform-provider-aws_4.48.0_linux_amd64.zip&lt;/p&gt;
  &lt;h1 id=&quot;provider-패키지를-다운받을-경로&quot;&gt;provider 패키지를 다운받을 경로&lt;/h1&gt;
  &lt;p&gt;mkdir -p /usr/share/terraform/providers/registry.terraform.io/hashicorp/aws/4.48.0/linux_amd64/
cp ./terraform-provider-aws_v4.48.0_x5 /usr/share/terraform/providers/registry.terraform.io/hashicorp/aws/4.48.0/linux_amd64/&lt;/p&gt;
  &lt;h1 id=&quot;plugin-cache-경로&quot;&gt;plugin cache 경로&lt;/h1&gt;
  &lt;p&gt;mkdir -p ~/.terraform.d/plugins/registry.terraform.io/hashicorp/aws/4.48.0/linux_amd64/
cp ./terraform-provider-aws_v4.48.0_x5 ~/.terraform.d/plugins/registry.terraform.io/hashicorp/aws/4.48.0/linux_amd64/&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.terraformrc 파일을 생성하여 공식저장소 대신 다운받을 경로를 지정한다.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;$ vi ~/.terraformrc&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# plugin cache 저장 경로&lt;/span&gt;
plugin_cache_dir &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/.terraform.d/plugin-cache&quot;&lt;/span&gt;
disable_checkpoint &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true
&lt;/span&gt;provider_installation &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	filesystem_mirror &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;c&quot;&gt;# 공식저장소 대신 init시 패키지를 다운받을 경로&lt;/span&gt;
		path &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/usr/share/terraform/providers&quot;&lt;/span&gt;
		include &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;registry.terraform.io/hashicorp/*&quot;&lt;/span&gt;,.....]
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	direct &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		exclude &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;registry.terraform.io/hashicorp/*&quot;&lt;/span&gt;,.....]
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;terraform-init-테스트&quot;&gt;terraform init 테스트&lt;/h3&gt;

&lt;p&gt;vi ~/terraform-test/aws-ec2/main.tf&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;terraform &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  required_providers &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    aws &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hashicorp/aws&quot;&lt;/span&gt;
      version &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;gt;= 3.0.0&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  required_version &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;gt;= 1.2.0&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

provider &lt;span class=&quot;s2&quot;&gt;&quot;aws&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  region  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;us-west-2&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

resource &lt;span class=&quot;s2&quot;&gt;&quot;aws_instance&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;app_server&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  ami           &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ami-830c94e3&quot;&lt;/span&gt;
  instance_type &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;t2.micro&quot;&lt;/span&gt;

  tags &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    Name &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ExampleAppServerInstance&quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;$ terraform init&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/67899732/210210939-fcf0e921-11ef-4255-996f-3cbedfce77d3.png&quot; alt=&quot;tf-init&quot; /&gt;&lt;/p&gt;

&lt;p&gt;에러가 발생하지 않고 init에 성공했다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그럼 이제 AWS VPC부터 생성해보자.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;참고&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.hashicorp.com/terraform/tutorials/aws-get-started&quot;&gt;https://developer.hashicorp.com/terraform/tutorials/aws-get-started&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.hashicorp.com/terraform/tutorials/aws-get-started/aws-build#troubleshooting&quot;&gt;https://developer.hashicorp.com/terraform/tutorials/aws-get-started/aws-build#troubleshooting&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://releases.hashicorp.com/terraform-provider-aws/4.48.0/&quot;&gt;https://releases.hashicorp.com/terraform-provider-aws/4.48.0/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 26 Nov 2022 11:00:00 +0900</pubDate>
        <link>https://ga0-lee.github.io/posts/terraform-private-network/</link>
        <guid isPermaLink="true">https://ga0-lee.github.io/posts/terraform-private-network/</guid>
        
        <category>terraform</category>
        
        <category>aws</category>
        
        
        <category>Terraform</category>
        
        <category>Cases</category>
        
      </item>
    
      <item>
        <title>Nginx if문 사용하기</title>
        <description>&lt;h2 id=&quot;nginx-if문-사용하기&quot;&gt;Nginx if문 사용하기&lt;/h2&gt;

&lt;h3 id=&quot;상황&quot;&gt;상황&lt;/h3&gt;

&lt;p&gt;특정 키워드가 포함된 요청을 다른 url로 proxy pass 하거나 401, 403과 같은 에러를 발생하게 해달라는 요청이 있었다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;nginx.conf에 if문을 사용하면 위와 같이 특정 상황에 대한 처리를 다르게 할 수 있다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;nginxconf에-if문-설정-방법&quot;&gt;nginx.conf에 if문 설정 방법&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;test라는 키워드가 포함된 uri가 요청 들어왔을 때 403에러를 발생시키는 설정&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;...

location / &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$uri&lt;/span&gt; ~ &lt;span class=&quot;s2&quot;&gt;&quot;(.*)(test)(.*)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;403&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

...
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;test라는 키워드가 포함된 uri가 요청 들어왔을 때 다른쪽으로 proxy pass 하기&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;...

location /&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &amp;amp;proxy_pass_url &lt;span class=&quot;s2&quot;&gt;&quot;http://origin.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$uri&lt;/span&gt; ~ &lt;span class=&quot;s2&quot;&gt;&quot;(.*)(test)(.*)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
	    &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$proxy_pass_url&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;http://test.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	proxy_pass &lt;span class=&quot;nv&quot;&gt;$proxy_pass_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

...
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 설정하면 특정 상황에 따라 다른 처리를 할 수 있다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

</description>
        <pubDate>Fri, 25 Nov 2022 11:00:00 +0900</pubDate>
        <link>https://ga0-lee.github.io/posts/nginx-if/</link>
        <guid isPermaLink="true">https://ga0-lee.github.io/posts/nginx-if/</guid>
        
        <category>nginx</category>
        
        
        <category>Nginx</category>
        
        <category>Cases</category>
        
      </item>
    
      <item>
        <title>Java Pod에 OOM 발생시 Heap Dump 생성하는 설정하기</title>
        <description>&lt;h2 id=&quot;java-pod에-oom-발생시-heap-dump-생성하는-설정하기&quot;&gt;Java Pod에 OOM 발생시 Heap Dump 생성하는 설정하기&lt;/h2&gt;

&lt;h3 id=&quot;상황&quot;&gt;상황&lt;/h3&gt;

&lt;p&gt;Java 기반의 Pod가 OOM이 발생하여 재생성 되었는데 이유가 무엇인지 확인할 수 없어 OOM killed 되었을 때 Heap Dump를 생성하는 옵션을 설정하고자 한다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;설정-방법&quot;&gt;설정 방법&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Pod 및 ConfigMap 설정&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;
&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;apps/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Deployment&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-deploy&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-ns&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;...&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;envFrom&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;configMapRef&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-configmap&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;	&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;volumeMounts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;mountPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/fs&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-fs&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;		&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-fs&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;persistentVolumeClaim&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;claimName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-pvc&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;		&lt;/span&gt;  
&lt;span class=&quot;nn&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ConfigMap&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-configmap&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-ns&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;JAVA_OPT&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-Dspring.profiles.active=dev&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-Duser.timezone=Asia/Seoul&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;HEAP_OPT&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-XX:+HeapDumpOnOutOfMemoryError&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-XX:HeapDumpPath=/fs/heap_dump/${HOSTNAME}.hprof&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;		&lt;/span&gt;
                               &lt;span class=&quot;c1&quot;&gt;# OOM 발생시 Heap Dump를 생성하겠다는 옵션   # Pod의 HOSTNAME은 Pod명이므로 Pod이름으로 해당 경로에 Heap dump 파일을 생성한다.&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;entrypoint.sh 설정&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;

java &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;HEAP_OPT&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-jar&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;JAVA_OPT&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; /deploy/app.jar
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 entrypoint.sh에 java 실행 옵션으로 ConfigMap에 설정한 HEAP_OPT를 주면 Pod가 실행될 때 Heap dump를 생성하는 옵션이 적용된다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이제 OOM killed가 발생했을 때 Pod에 마운트한 File system에 dump가 저장될 것이다.&lt;br /&gt;
&lt;br /&gt; &lt;br /&gt;&lt;/p&gt;

</description>
        <pubDate>Thu, 24 Nov 2022 11:00:00 +0900</pubDate>
        <link>https://ga0-lee.github.io/posts/k8s-oom-heap-dump/</link>
        <guid isPermaLink="true">https://ga0-lee.github.io/posts/k8s-oom-heap-dump/</guid>
        
        <category>k8s</category>
        
        <category>java</category>
        
        
        <category>Kubernetes</category>
        
        <category>Cases</category>
        
      </item>
    
      <item>
        <title>AWS Opensearch Timezone 설정하기</title>
        <description>&lt;h2 id=&quot;aws-opensearch-timezone-설정하기&quot;&gt;AWS Opensearch Timezone 설정하기&lt;/h2&gt;

&lt;h3 id=&quot;상황&quot;&gt;상황&lt;/h3&gt;

&lt;p&gt;AWS Opensearch를 사용하여 EKS 로그를 수집하고 Opensearch Dashboard를 통해 로그를 모니터링 한다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그러나 Opensearch Dashboard에서 로그를 확인하면 @timestamp가 Table 형식에서는 KST로 출력되고, JSON 형식에서는 UTC로 출력이 되는 문제를 발견했다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;JSON 형식으로 데이터를 뽑아서 써야 하기 때문에 다음과 같은 방법으로 Timezone을 KST로 맞추었다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;opensearch-dashboard의-timezone-적용-방식&quot;&gt;Opensearch Dashboard의 Timezone 적용 방식&lt;/h3&gt;

&lt;p&gt;먼저, Opensearch Dashboard에서 JSON 형식으로 보는 로그 데이터와 Devtool 또는 Rest API호출을 통해 보는 로그 데이터는 Opensearch에 저장된 원본 데이터다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그래서 Opensearch에 데이터가 저장될 때 UTC로 저장되면 UTC로 출력되고, KST로 저장되면 KST로 출력된다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그러나 Opensearch Dashboard의 Table 형식으로 보는 로그 데이터는 Opensearch Dashboard의 Stack Management/Advanced Settings/Timezone for date formatting에서 설정한 Timezone 옵션값에 따라 원본 데이터가 바뀌어 출력된다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;즉, Opensearch에 인덱싱이 될 때 UTC로 저장된 후 Stack Management/Advanced Settings/Timezone for date formatting에서 KST로 설정하면 Table 형식에서만 원본 데이터인 UTC에 +9를 한 KST로 보인다는 것이다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;또한 Opensearch에 인덱싱이 될 때 KST로 저장된 후 Stack Management/Advanced Settings/Timezone for date formatting에서도 KST로 설정하면 Table 형식으로 로그를 찾으려면 KST 기준시간 +9를 한 시간대에서 로그를 검색해야 한다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;#예시
Opensearch Indexing -&amp;gt; KST 09:00:00
-&amp;gt; Opensearch Dashboard에서 Timezone을 KST로 설정 
-&amp;gt; Opensearch에 저장된 데이터에 Timezone 세팅까지 이중으로 하는 셈이다.
-&amp;gt; 그래서 KST 18:00:00에서 찾아야 해당 로그를 확인할 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이런식으로 동작되기 때문에 Opensearch Timezone 설정을 하려면 몇 가지 선택을 해야 한다.&lt;/p&gt;

&lt;h3 id=&quot;opensearch-로그의-timestamp를-kst로-출력하기&quot;&gt;Opensearch 로그의 timestamp를 KST로 출력하기&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1.원본 데이터는 UTC로 저장하고 Opensearch Dashboard에서 Timezone을 설정하여 Table 형식에서만 KST로 로그 보기&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;opensearch에 인덱싱 하는 lambda 코드 중 아래의 코드는 @timestamp를 UTC로 저장한다.
source[‘@timestamp’] = new Date(1 * logEvent.timestamp).toISOString();&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;위와 같이 Date의 toISOString은 UTC가 기본이라고 한다. 그러므로 위와 같이 UTC로 인덱싱한 후 Opensearch Dashboard에서만 Timezone을 KST로 변경해준다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;방법은 Opensearch Dashboard에 들어가서 좌측 상단의 메뉴를 누르고 Stack Management/Advanced Settings/Timezone for date formatting 경로로 들어가 KST로 변경 후 적용한다.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그럼 Opensearch Dashboard Discover에서 로그를 검색할 때 KST 기준으로 검색하면 Table 형식의 로그에서는 timestamp가 KST로 출력된다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;다만 이런 경우에는 JSON 형식으로 확인하면 UTC로 출력된다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.원본 데이터를 KST로 저장하고 Opensearch Dashboard는 UTC로 설정하기&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;opensearch에 인덱싱 하는 lambda 코드 중 아래의 코드는 @timestamp를 KST로 저장한다.
source[‘@timestamp’] = moment(logEvent.timestamp).tz(‘Asia/Seoul’).format(‘YYYY-MM-DDTHH:mm:ss.SSS[Z]’);&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;moment 라이브러리를 추가하여 쓰는 방법은 여기서 확인할 수 있다. -&amp;gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;위와 같이 moment 함수를 사용하여 opensearch 자체에 인덱싱을 KST로 하면 JSON이나 Devtool에서도 KST로 출력되는 로그를 볼 수 있다.&lt;/p&gt;

&lt;p&gt;그러나 이때 몇 가지 더 설정을 해주어야 한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Stack Management/Advanced Settings/Timezone for date formatting 경로로 들어가 UTC로 변경 후 적용한다.&lt;br /&gt;
-&amp;gt; KST에 +9시간이 되는 것을 막기 위해&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Opensearch Dashboard에서 Discover로 검색할 때 now가 아닌 절대 시간을 입력해야 해당 시간의 로그가 검색된다.&lt;br /&gt;
-&amp;gt;  아마 Opensearch Dashboard는 UTC로 돼있고 로그 값은 KST라서 현재 시간으로 찾으면 안 나오고 시간 검색에 절대값을 넣어야 검색이 가능한 것 같다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;매번 절대값을 넣어 검색하는 게 번거롭긴 하지만 어쩔 수 없는 것 같다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;차라리 UTC로 데이터를 뽑아서 데이터를 사용할 때 +9시간을 해주는 게 더 나을 수도 있을 것 같다.^^&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;참고&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;[https://aws.amazon.com/ko/blogs/big-data/set-advanced-settings-with-the-amazon-opensearch-service-dashboards-api/] (https://aws.amazon.com/ko/blogs/big-data/set-advanced-settings-with-the-amazon-opensearch-service-dashboards-api/)&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Wed, 23 Nov 2022 10:00:00 +0900</pubDate>
        <link>https://ga0-lee.github.io/posts/aws-os-timezone/</link>
        <guid isPermaLink="true">https://ga0-lee.github.io/posts/aws-os-timezone/</guid>
        
        <category>aws</category>
        
        <category>opensearch</category>
        
        
        <category>AWS</category>
        
        <category>Opensearch</category>
        
      </item>
    
      <item>
        <title>EKS 기존 노드로 AMI를 생성하여 새로운 노드그룹 생성하기</title>
        <description>&lt;h2 id=&quot;eks-기존-노드로-ami를-생성하여-새로운-노드그룹-생성하기&quot;&gt;EKS 기존 노드로 AMI를 생성하여 새로운 노드그룹 생성하기&lt;/h2&gt;

&lt;h3 id=&quot;상황&quot;&gt;상황&lt;/h3&gt;

&lt;p&gt;AWS EKS를 사용하던 중 기존 노드(인스턴스)에 설치된 솔루션 및 설정들을 그대로 새 노드에 적용해야 하는 일이 생겼다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;애초에 노드 그룹을 생성할 때 템플릿에 필요한 설정들을 다 넣어놨으면 좋았겠지만, 중간에 추가된 것들이라 기존 노드로 이미지(ami)를 만들어서 새 노드그룹을 생성해야 한다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;eks-노드인스턴스-이미지ami-생성하기&quot;&gt;EKS 노드(인스턴스) 이미지(AMI) 생성하기&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1.아래의 경로로 인스턴스 상세 페이지로 접속한다.&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;EKS 콘솔 -&amp;gt; 클러스터 -&amp;gt; 컴퓨팅 -&amp;gt; 복사하고자 하는 노드 선택 -&amp;gt; 인스턴스 ID 클릭 -&amp;gt; 인스턴스 상세 페이지 진입&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;2.인스턴스로 이미지(AMI)를 생성한다.&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;우측 상단의 작업 버튼 클릭 -&amp;gt; 이미지 및 템플릿 클릭 -&amp;gt; 이미지 생성 클릭 -&amp;gt; 이미지 이름, 설명, 태그 등 추가하고 생성하기 클릭&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/67899732/209769079-c8ea707b-d25b-46bc-b0f5-ca3831bec6f8.png&quot; alt=&quot;ami1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.생성된 이미지(AMI)를 확인한다.&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;EC2 콘솔 -&amp;gt; 이미지 -&amp;gt; AMI 접속 -&amp;gt; 위에서 설정한 AMI 이름으로 검색하여 생성된 이미지 확인&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;기존-노드의-ami로-새-시작템플릿-생성하기&quot;&gt;기존 노드의 AMI로 새 시작템플릿 생성하기&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1.다음과 같은 경로에서 시작템플릿을 생성할 수 있다.&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;EC2 콘솔 -&amp;gt; 인스턴스 -&amp;gt; 시작템플릿 -&amp;gt; 시작템플릿 생성&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;2.시작템플릿 이름 및 설명 등을 작성하고 ‘애플리케이션 및 OS 이미지(Amazon Machine Image)’에서 위에서 생성한 AMI를 선택한다.&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;내 AMI 클릭 -&amp;gt; 위에서 생성한 AMI 이름 검색 -&amp;gt; 선택 -&amp;gt; 나머지 사항 설정 -&amp;gt; 시작템플릿 생성 버튼 클릭&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/67899732/209770402-c66a8753-94e1-4ec3-acf4-31f7f8e80978.png&quot; alt=&quot;ami2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이렇게 EKS 노드그룹을 생성할 때 사용할 시작템플릿을 만들었으니 이제 이 시작템플릿을 가지고 새 노드그룹만 만들면 된다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;새-노드그룹-생성하기&quot;&gt;새 노드그룹 생성하기&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1.다음과 같은 경로에서 노드그룹을 생성할 수 있다.&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;EKS 콘솔 -&amp;gt; 클러스터 -&amp;gt; 컴퓨팅 -&amp;gt; 노드그룹 -&amp;gt; 우측 상단 노드그룹 추가 클릭&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;2.시작템플릿 사용을 활성화하여 위에서 만든 시작템플릿을 선택한다.&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;노드그룹 이름, 역할을 설정한 뒤 시작템플릿을 선택한다. 그 후 여러 세부사항들을 설정하고 노드그룹을 생성한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/67899732/209772530-cdee5a1f-d009-4379-8b02-4eeccbe85908.png&quot; alt=&quot;ami3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.노드 생성 후 노드에 접속하여 원하는 설정들이 포함됐는지 확인한다.&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;$ ssh -i EC2-key.pem workernode-ip&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;주의사항&quot;&gt;주의사항&lt;/h3&gt;

&lt;p&gt;새 노드를 생성한 후 해당 노드에 Pod를 배포하면 다음과 같은 에러가 발생한다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Error from server: no preferred addresses found; known addresses: []&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;해당 시작템플릿은 기존 노드의 모든 것들을 가져왔기 때문에 kubelet 설정도 기존 노드의 IP로 되어있어 발생하는 에러다.&lt;/p&gt;

&lt;p&gt;그러므로 새 노드에 접속하여 아래 파일을 변경해줘야 한다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;$ ssh -i EC2-key.pem workernode-ip
$ vi /etc/systemd/system/kubelet.service.d/10-kubelet-args.conf
Enviroment=’KUBELET_ARGS=–node-ip=”이 부분에 적혀있는 IP를 새 노드 IP로 변경해줘야 한다”&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;변경 후 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;systemctl restart kubelet&lt;/code&gt;을 해준다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그 후 Pod를 재배포 해보면 에러가 발생하지 않고 제대로 배포된 것을 확인할 수 있다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 22 Nov 2022 10:00:00 +0900</pubDate>
        <link>https://ga0-lee.github.io/posts/eks-workernode-ami/</link>
        <guid isPermaLink="true">https://ga0-lee.github.io/posts/eks-workernode-ami/</guid>
        
        <category>AWS</category>
        
        <category>eks</category>
        
        
        <category>AWS</category>
        
        <category>EKS</category>
        
      </item>
    
      <item>
        <title>Java 기반 Pod에 Heap Memory 설정하기</title>
        <description>&lt;h2 id=&quot;java-기반-pod에-heap-memory-설정하기&quot;&gt;Java 기반 Pod에 Heap Memory 설정하기&lt;/h2&gt;

&lt;h3 id=&quot;상황&quot;&gt;상황&lt;/h3&gt;

&lt;p&gt;성능테스트를 하던 도중 원하는 목표치에 도달하기도 전에 OOM(Out of Memory) 에러가 발생하여 Java 기반의 Pod의 Heap 사이즈를 변경해달라는 요청을 받아 변경하려 한다.
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;해결-방법&quot;&gt;해결 방법&lt;/h3&gt;

&lt;p&gt;아래와 같이 java 실행 명령어에 HEAP_OPT 값을 주어 app.jar를 실행시켜야 한다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;entrypoint.sh 
java ${HEAP_OPT} -jar ${JAVA_OPT} app.jar&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;해당 HEAP_OPT를 ConfigMap에 설정하여 entrypoint.sh 가 실행될 때 같이 실행될 수 있도록 한다.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ConfigMap&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-configmap&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-ns&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;TZ&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Asia/Seoul&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;JAVA_OPT&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-Dspring.profiles.active=dev&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-Duser.timezone=Asia/Seoul&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;HEAP_OPT&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-XX:MinRAMPercentage=50&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-XX:MaxRAMPercentage=80&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-XshowSettings:vm&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;최소, 최대 Heap memory 값을 절대값으로 넣어주면 Pod의 Resource Limits 값이 달라질 때마다 그에 맞춰 변경을 해줘야하는 불편함이 있다. 그래서 MinRAMPercentage, MaxRAMPercentage 값을 통해 비율을 조정해주면 된다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;그리고 우리가 변경한 최소, 최대 Heap memory 사이즈가 제대로 적용됐는지 확인하기 위해 -XshowSettings:vm 값을 넣어준다. 그러면 Pod가 부팅될 때 로그에 세팅된 Heap 사이즈가 찍힌다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;ex) Pod의 Resource Limits가 Memory 4G인 경우 Pod 실행을 위해 사용되는 memory 빼고 남는 memory 중 80인 약 3G 정도가 Heap Max 사이즈로 적용되었다.&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/67899732/209062330-4a2c46bc-2f81-43e4-bc25-6cd267bdfd67.png&quot; alt=&quot;heap&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Mon, 21 Nov 2022 10:00:00 +0900</pubDate>
        <link>https://ga0-lee.github.io/posts/k8s-java-heap-setting/</link>
        <guid isPermaLink="true">https://ga0-lee.github.io/posts/k8s-java-heap-setting/</guid>
        
        <category>k8s</category>
        
        <category>java</category>
        
        
        <category>Kubernetes</category>
        
        <category>Cases</category>
        
      </item>
    
      <item>
        <title>K8s Pod에 Time Zone 설정하기</title>
        <description>&lt;h2 id=&quot;k8s-pod에-time-zone-설정하기&quot;&gt;K8s Pod에 Time Zone 설정하기&lt;/h2&gt;

&lt;h3 id=&quot;상황&quot;&gt;상황&lt;/h3&gt;
&lt;p&gt;생성된 Pod의 로그를 kubectl logs 명령어로 확인하면 로그가 찍히는 시간이 현재 시간과 달라 에러를 디버깅할 때 어려움이 생겼다.&lt;br /&gt;
&lt;br /&gt;
그래서 Pod에 접속하여 /etc/localtime 을 확인해보니 UTC로 되어있었다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;해결방안&quot;&gt;해결방안&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Pod에 Time Zone을 설정해서 한국 표준 시간으로 맞춰야 한다.&lt;/strong&gt;  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Time Zone을 설정하는 방법은 여러 개가 있다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. TZ 환경변수 설정하기&lt;/strong&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;ConfigMap을 이용하여 환경변수에 KST를 설정해준다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;apps/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Deployment&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-deploy&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-ns&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;replicas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;matchLabels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;RollingUpdate&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;123123.dkr.ecr.ap-northeast-2.amazonaws.com/test-ecr:0.1.2&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;imagePullPolicy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Always&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-container&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;containerPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8080&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;p-8080&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;envFrom&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;configMapRef&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-configmap&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ConfigMap&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-configmap&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-ns&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;TZ&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Asia/Seoul&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 TZ을 Asia/Seoul로 설정했으나 적용이 되지 않는다. 그래서 다음 방법으로 해결했다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.노드의 zoneinfo를 마운트하여 localtime을 설정하기&lt;/strong&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;apps/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Deployment&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-deploy&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-ns&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;replicas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;matchLabels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;RollingUpdate&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;123123.dkr.ecr.ap-northeast-2.amazonaws.com/test-ecr:0.1.2&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;imagePullPolicy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Always&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-container&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;containerPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8080&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;p-8080&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;envFrom&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;configMapRef&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-configmap&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;volumeMounts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;tz-config&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;mountPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/etc/localtime&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;tz-config&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;hostPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/usr/share/zoneinfo/Asia/Seoul&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ConfigMap&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-configmap&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-ns&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;TZ&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Asia/Seoul&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위와 같은 방법으로 설정하니 Time Zone이 KST로 잘 적용되었다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;어떤 경우에는 base image에 /usr/share/zoneinfo가 없어서 해당 directory를 같이 마운트해줘야 KST가 적용되는 경우도 있다.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;apps/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Deployment&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-deploy&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-ns&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;replicas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;matchLabels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;RollingUpdate&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;123123.dkr.ecr.ap-northeast-2.amazonaws.com/test-ecr:0.1.2&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;imagePullPolicy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Always&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-container&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;containerPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8080&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;p-8080&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;envFrom&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;configMapRef&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-configmap&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;volumeMounts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;tz-data&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;mountPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/usr/share/zoneinfo&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;tz-config&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;mountPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/etc/localtime&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;		&lt;/span&gt;  
      &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;tz-data&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;hostPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/usr/share/zoneinfo&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;tz-config&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;hostPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/usr/share/zoneinfo/Asia/Seoul&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;		&lt;/span&gt;  
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;&amp;lt;br/&amp;gt;&lt;/span&gt;


&lt;span class=&quot;s&quot;&gt;그러나 혹시 spring 어플리케이션에서 위와 같은 방법으로도 적용이 안 된다면 JAVA 실행 옵션에 아래와 같이 설정해보자.&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;*3&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;. JVM 실행 옵션 주기**&lt;/span&gt;


&lt;span class=&quot;err&quot;&gt;```&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;yaml&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;apps/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Deployment&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-deploy&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-ns&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;replicas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;matchLabels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;RollingUpdate&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;123123.dkr.ecr.ap-northeast-2.amazonaws.com/test-ecr:0.1.1&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;imagePullPolicy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Always&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-container&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;containerPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8080&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;p-8080&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;envFrom&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;configMapRef&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-configmap&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;volumeMounts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;tz-config&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;mountPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/etc/localtime&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;tz-config&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;hostPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/usr/share/zoneinfo/Asia/Seoul&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ConfigMap&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-configmap&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-ns&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;TZ&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Asia/Seoul&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;JAVA_OPT&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-Dspring.profiles.active=dev&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-Duser.timezone=Asia/Seoul&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 ConfigMap에서 설정한 -Duser.timezone=Asia/Seoul는 Dockerfile의 entrypoint에서 java -jar ${JAVA_OPT}로 실행된다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;세 가지 방법을 통해 로그가 KST로 나오는 것을 확인했다.&lt;/p&gt;

</description>
        <pubDate>Sun, 20 Nov 2022 11:30:00 +0900</pubDate>
        <link>https://ga0-lee.github.io/posts/k8s-pod-tz-setting/</link>
        <guid isPermaLink="true">https://ga0-lee.github.io/posts/k8s-pod-tz-setting/</guid>
        
        <category>k8s</category>
        
        
        <category>Kubernetes</category>
        
        <category>Cases</category>
        
      </item>
    
      <item>
        <title>K8s PodAntiAffinity로 Pod의 중복 배포를 최소화 하기</title>
        <description>&lt;h2 id=&quot;k8s-podantiaffinity로-pod의-중복-배포를-최소화-하기&quot;&gt;K8s PodAntiAffinity로 Pod의 중복 배포를 최소화 하기&lt;/h2&gt;

&lt;h3 id=&quot;상황&quot;&gt;상황&lt;/h3&gt;
&lt;p&gt;생성된 Worker Node가 3개, Pod의 최소 replica 수도 3개인데 어떤 Deployment는 하나의 노드에 3개의 Pod가 전부 배포되어 있고, 어떤 Deployment는 1,2번에만 pod가 배포되어 있는 걸 발견했다.&lt;br /&gt;
&lt;br /&gt;
이런 경우 어느 노드 또는 가용영역에 장애가 발생하게 되면 순간적으로 서비스 중단이 될 수 있기에 각 노드에 Pod가 골고루 배포되도록 설정할 필요가 있다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;해결방안&quot;&gt;해결방안&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;PodAntiAffinity를 사용하여 이미 같은 Deployment의 Pod가 배포된 노드에는 중복 배포가 되지 않도록 설정한다.&lt;/strong&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;podAntiAffinity 규칙은 스케줄러로 하여금 app=test 레이블을 가진 복수 개의 레플리카를 단일 노드에 배치하지 않게 한다. 이렇게 하여 Pod를 각 노드에 분산하여 생성한다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.weight 값에 따라 어느 Node에 배포할지 가중치를 줄 수 있다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;예를 들어 preferredDuringSchedulingIgnoredDuringExecution 규칙을 만족하는 노드가 2개 있고, 하나에는 app: test 레이블이 있고 다른 하나에는 type: nginx 레이블이 있으면, 스케줄러는 각 노드의 weight를 확인한 뒤 weight가 더 작은 쪽에 Pod를 배포한다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;즉, app: test 레이블을 가진 pod-A가 배포된 node-A와 type: nginx 레이블을 가진 pod-B가 배포된 node-B가 있을 때 아래의 test-deploy는 가중치가 더 작은 app: test 레이블을 가진 pod-A가 배포된 node-A에 배포된다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;또한 podAntiAffinity에서는 노드에 일관된 레이블을 지정해야 한다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;즉, 클러스터의 모든 노드는 topologyKey 와 매칭되는 적절한 레이블을 가지고 있어야 한다. 일부 또는 모든 노드에 지정된 topologyKey 레이블이 없는 경우에는 의도하지 않은 동작이 발생할 수 있다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;예시&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;apps/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Deployment&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-deploy&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-ns&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;replicas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;matchLabels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;RollingUpdate&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;affinity&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;podAntiAffinity&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;preferredDuringSchedulingIgnoredDuringExecution&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;podAffinityTerm&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;labelSelector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;matchExpressions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;app&lt;/span&gt;
                  &lt;span class=&quot;na&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;In&lt;/span&gt;
                  &lt;span class=&quot;na&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
                  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;		&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;topologyKey&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;kubernetes.io/hostname&quot;&lt;/span&gt;                  
          &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;50&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;podAffinityTerm&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;labelSelector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;matchExpressions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;type&lt;/span&gt;
                  &lt;span class=&quot;na&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;In&lt;/span&gt;
                  &lt;span class=&quot;na&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
                  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;				&lt;/span&gt;  
              &lt;span class=&quot;na&quot;&gt;topologyKey&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;kubernetes.io/hostname&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;123123123.dkr.ecr.ap-northeast-2.amazonaws.com/test:0.1.1&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;imagePullPolicy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Always&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-container&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;containerPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8080&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;p-8080&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;envFrom&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;configMapRef&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-configmap&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;memory&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1G&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;cpu&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;limits&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;memory&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1G&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;cpu&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;livenessProbe&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;tcpSocket&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8080&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;initialDelaySeconds&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;30&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;periodSeconds&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;60&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;readinessProbe&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;tcpSocket&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8080&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;initialDelaySeconds&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;30&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;periodSeconds&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;60&lt;/span&gt;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;주의: PodAffinity와 PodAntiAffinity에는 상당한 양의 프로세싱이 필요하기에 대규모 클러스터에서는 스케줄링 속도가 크게 느려질 수 있다. 수백 개의 노드를 넘어가는 클러스터에서 이를 사용하는 것은 추천하지 않는다.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;참고&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://kubernetes.io/ko/docs/concepts/scheduling-eviction/assign-pod-node/#more-practical-use-cases&quot;&gt;https://kubernetes.io/ko/docs/concepts/scheduling-eviction/assign-pod-node/#more-practical-use-cases&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 19 Nov 2022 12:40:00 +0900</pubDate>
        <link>https://ga0-lee.github.io/posts/k8s-pod-anti-affinity/</link>
        <guid isPermaLink="true">https://ga0-lee.github.io/posts/k8s-pod-anti-affinity/</guid>
        
        <category>k8s</category>
        
        
        <category>Kubernetes</category>
        
        <category>Cases</category>
        
      </item>
    
      <item>
        <title>EKS Autoscaling Group 세부 설정하기</title>
        <description>&lt;h2 id=&quot;eks-autoscaling-group-세부-설정하기&quot;&gt;EKS Autoscaling Group 세부 설정하기&lt;/h2&gt;

&lt;h3 id=&quot;상황&quot;&gt;상황&lt;/h3&gt;
&lt;p&gt;EKS 노드그룹을 생성하면 해당 노드그룹의 Autoscaling을 담당하는 Autoscaling Group이 함께 생성되며 수시로 Workernode를 체크해서 Node의 수를 조절한다. (노드그룹에 지정한 desired, min, max를 가지고)&lt;br /&gt;
&lt;br /&gt;
그러나 어떠한 이유로 이미 생성된 노드가 변경되면 안 되는 상황이 있다. (ex. 보안 심의, 컷오버 등등)&lt;br /&gt;
&lt;br /&gt;
그런 상황에서도 테스트는 이뤄져야 하고 테스트 도중 노드가 새로 생기고 사라지기도 하는데 그때마다 이미 결재를 다 받아놓은 노드가 삭제되면 아주 난감한 상황이 발생한다.&lt;br /&gt;
&lt;br /&gt;
그래서 이미 결재 받은 노드 말고, 테스트 때문에 생긴 노드만 삭제되게 해야 했다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;해결방안&quot;&gt;해결방안&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1.Autoscaling Group의 종료 정책을 변경한다.&lt;/strong&gt;&lt;br /&gt;
&lt;br /&gt;
기본적으로 Autoscaling Group의 종료 정책은 제일 먼저 생긴 즉, 제일 오래된 인스턴스부터 종료하게 되어있다.  &lt;br /&gt;
&lt;br /&gt;
그래서 이것을 최신 인스턴스로 변경하면 제일 나중에 생긴 인스턴스부터 종료한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;EKS 콘솔 -&amp;gt; Cluster 선택 -&amp;gt; Node Group 선택 -&amp;gt; Autoscaling Group 선택 -&amp;gt; 세부정보 -&amp;gt; 제일 하단의 고급 구성 편집 클릭 -&amp;gt; 종료 정책에서 ‘가장 오래된 인스턴스’ 또는 ‘가장 오래된 시작템플릿’을 삭제 -&amp;gt; ‘최신 인스턴스’ 추가 후 저장&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.Autoscaling Group의 인스턴스 축소 보호를 설정한다.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;dl&gt;
      &lt;dt&gt;&lt;strong&gt;인스턴스 축소 보호란&lt;/strong&gt;&lt;/dt&gt;
      &lt;dd&gt;Auto Scaling 그룹에 대한 인스턴스 축소 보호 설정을 변경하여 축소 시 해당 Amazon EC2 Auto Scaling이 새 인스턴스를 종료할 수 있는지 여부를 제어할 수 있다.&lt;br /&gt;
축소 보호가 활성화된 경우 새로 시작된 인스턴스는 기본적으로 축소 보호되지만 이미 생성된 인스턴스들은 따로 설정을 해야한다.&lt;/dd&gt;
    &lt;/dl&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;기생성된 인스턴스에 축소 보호 활성화 하기&lt;/strong&gt;
    &lt;blockquote&gt;
      &lt;p&gt;EKS 콘솔 -&amp;gt; Cluster 선택 -&amp;gt; Node Group 선택 -&amp;gt; Autoscaling Group 선택 -&amp;gt; 인스턴스 관리 선택 -&amp;gt; 축소 보호를 설정하려는 인스턴스 선택 -&amp;gt; 우측 상단의 작업 버튼 클릭 -&amp;gt; ‘축소 보호 설정’ 클릭
*만약 이미 축소 보호가 설정된 인스턴스의 경우에는 ‘축소 보호 설정’ 버튼이 막혀있고, ‘축소 보호 제거’ 버튼만 활성화 되어있다.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;참고&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/ko_kr/autoscaling/ec2/userguide/ec2-auto-scaling-instance-protection.html&quot;&gt;https://docs.aws.amazon.com/ko_kr/autoscaling/ec2/userguide/ec2-auto-scaling-instance-protection.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 18 Nov 2022 10:40:00 +0900</pubDate>
        <link>https://ga0-lee.github.io/posts/eks-autoscaling-setting/</link>
        <guid isPermaLink="true">https://ga0-lee.github.io/posts/eks-autoscaling-setting/</guid>
        
        <category>aws</category>
        
        <category>eks</category>
        
        
        <category>AWS</category>
        
        <category>EKS</category>
        
      </item>
    
      <item>
        <title>K8s Pod 이미지 Pull 에러 해결방안</title>
        <description>&lt;h2 id=&quot;k8s-pod-이미지-pull-에러-해결방안&quot;&gt;K8s Pod 이미지 Pull 에러 해결방안&lt;/h2&gt;

&lt;h3 id=&quot;상황&quot;&gt;상황&lt;/h3&gt;
&lt;p&gt;Jenkins 파이프라인을 지우고 다시 생성하면서 버전이 같은 이미지가 생성되었다.&lt;br /&gt;
ECR에서는 같은 버전의 이미지가 push 되면 기존에 있던 이미지를 untagged로 바꾸고 새로 push된 이미지를 해당 버전으로 표기하여 저장한다.&lt;br /&gt;
&lt;br /&gt;
그러나 EKS에서 해당 버전으로 배포를 다시 했더니 새로 빌드한 이미지가 아닌 예전에 생성된 이미지로 Pod가 배포되었다.&lt;br /&gt;
&lt;br /&gt;
ex) 22.11.01에 빌드한 ecr-test:0.1.2은 spring v2.2.2 -&amp;gt; 22.11.05에 빌드한 ecr-test:0.1.2는 spring v2.6.0&lt;br /&gt;
    -&amp;gt; 그러나 22.11.05에 배포한 ecr-test:0.1.2 pod는 spring v2.2.2로 실행되고 있는 문제를 발견했다.&lt;/p&gt;

&lt;h3 id=&quot;원인&quot;&gt;원인&lt;/h3&gt;
&lt;p&gt;EKS Worker Node에 기존 ecr-test:0.1.2 버전의 이미지가 남아있었으며, Pod의 imagePullPolicy가 IfNotPresent로 되어 있었다.&lt;br /&gt;
&lt;br /&gt;
그래서 Pod는 ecr-test:0.1.2 버전의 이미지가 worker node의 docker에 있으므로 새로 ECR에서 pull 해오지 않고 예전에 pull 해왔던 기존 이미지를 사용하여 Pod를 배포했던 것이다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;해결방안&quot;&gt;해결방안&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1.먼저 Pod(또는 Deployment)의 yaml에 imagePullPolicy를 Always로 바꿔준다.&lt;/strong&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Pod&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; 
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-pod&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;spring&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ecr-test:0.1.2&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;imagePullPolicy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Always&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그러나 imagePullPolicy를 Always로 해준다고 해도 docker 이미지의 Digest 값이 같으면 다운로드를 시도는 하나 실제로 다운로드 하지 않는 현상이 있다고 한다.&lt;br /&gt;
&lt;br /&gt;
그러므로 worker node에 pull 해온 이미지들을 주기적으로 지워줌으로써 이전 이미지를 계속 쓰는 일이 없도록 해야 할 것이다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.docker prune을 실행시키는 cron shell script를 사용하여 docker image를 주기적으로 지워준다.&lt;/strong&gt;&lt;br /&gt;
&lt;br /&gt;
EKS의 경우 Worker Node가 생성될 때 Node Group의 시작템플릿에 cron shell을 생성하는 명령어를 추가해놓으면 worker node가 생성될 때마다 해당 shell도 함께 적용된다.&lt;br /&gt;
&lt;br /&gt;
이미 사용하고 있는 시작템플릿이 있는 경우 새로운 버전을 생성하여 적용한다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;EKS 콘솔 접속 -&amp;gt; 클러스터 -&amp;gt; 노드그룹 -&amp;gt; 시작템플릿 -&amp;gt; 작업 -&amp;gt; 템플릿 수정(새 버전 생성) -&amp;gt; 이미지 및 기본 설정들은 기존 버전과 동일하게 -&amp;gt; 제일 하단의 사용자데이터(User data)에 아래와 같이 입력 -&amp;gt; 템플릿 생성&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;MIME-Version: 1.0
Content-Type: multipart/mixed&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;boundary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;==MYBOUNDARY==&quot;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;MYBOUNDARY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#!/bin/bash -xe&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;EKS_REGION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ap-northeast-2'&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;EKS_CLUSTER_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'cluster-name'&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;EKS_API_SERVER_ENDPOINT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'https://cluster-api-server-endpoint.gr7.ap-northeast-2.eks.amazonaws.com'&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;EKS_B64_CLUSTER_CA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Certificate authority'&lt;/span&gt;

/etc/eks/bootstrap.sh &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--apiserver-endpoint&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$EKS_API_SERVER_ENDPOINT&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--b64-cluster-ca&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$EKS_B64_CLUSTER_CA&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--kubelet-extra-args&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'--node-labels=node-type=self,ng=kbland-ekcl-stg-ap'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$EKS_CLUSTER_NAME&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# docker prune&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0 7 * * 1 bash docker image prune&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /etc/cron.weekly/cleaner_image.sh &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;chmod&lt;/span&gt; +x /etc/cron.weekly/cleaner_image.sh

&lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;MYBOUNDARY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;템플릿을 새로 생성한 후 EKS 콘솔에서 시작템플릿 버전을 위에서 생성한 버전으로 변경한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그 후 ssh -i ec2-key.pem worker-node-ip 으로 worker node에 접속하여 해당 파일이 잘 생성됐나 확인한다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;cat /etc/cron.weekly/cleaner_image.sh&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위와 같은 작업을 통해 해당 현상을 해결하였다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;참고&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://kubernetes.io/ko/docs/concepts/containers/images/#%EC%9D%B4%EB%AF%B8%EC%A7%80-%ED%92%80-pull-%EC%A0%95%EC%B1%85&quot;&gt;https://kubernetes.io/ko/docs/concepts/containers/images/#%EC%9D%B4%EB%AF%B8%EC%A7%80-%ED%92%80-pull-%EC%A0%95%EC%B1%85&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.docker.com/storage/storagedriver/&quot;&gt;https://docs.docker.com/storage/storagedriver/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 17 Nov 2022 10:40:00 +0900</pubDate>
        <link>https://ga0-lee.github.io/posts/k8s-image-pull-error/</link>
        <guid isPermaLink="true">https://ga0-lee.github.io/posts/k8s-image-pull-error/</guid>
        
        <category>k8s</category>
        
        <category>eks</category>
        
        <category>docker</category>
        
        
        <category>Kubernetes</category>
        
        <category>EKS</category>
        
      </item>
    
      <item>
        <title>EKS Node Group Security Group에 NLB health check용 ingress rule 생성 방지하기</title>
        <description>&lt;h2 id=&quot;eks-node-group-security-group에-nlb-health-check용-ingress-rule-생성-방지하기&quot;&gt;EKS Node Group Security Group에 NLB health check용 ingress rule 생성 방지하기&lt;/h2&gt;

&lt;h3 id=&quot;상황&quot;&gt;상황&lt;/h3&gt;

&lt;p&gt;EKS Node Group의 Security Group을 살펴보던 도중 AWS NLB로 생성한 k8s Service의 NodePort들이 여러 개 생성되어 있는 것을 발견했다.&lt;br /&gt;
심지어는 service를 새로 생성했을 때 sg의 ingress rule이 모자른다는 에러 메세지가 뜨기도 했다. (rule 개수 limit에 도달해서) 
그래서 k8s NodePort 범위인 30000 ~ 32767 포트 대역으로 열어주는 rule을 생성했음에도 불구하고 30000번대 포트의 ingress rule은 지속적으로 생성되었다.&lt;/p&gt;

&lt;h3 id=&quot;해결-방안&quot;&gt;해결 방안&lt;/h3&gt;
&lt;p&gt;AWS Load balancer controller를 사용하면 annotation을 추가하여 sg에 rule 추가되는 것을 방지할 수 있다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;AWS에서는 ALB/NLB에 대한 오퍼레이션을 유연하게 지원하고자 AWS Load balancer controller라는 오픈소스 프로젝트를 통해 Kubernetes의 기본 service controller보다 AWS 리소스에 대해 더 다양한 기능을 제공하고 있다.
AWS Load balancer controller 설치하기
&lt;a href=&quot;https://docs.aws.amazon.com/ko_kr/eks/latest/userguide/aws-load-balancer-controller.html&quot;&gt;https://docs.aws.amazon.com/ko_kr/eks/latest/userguide/aws-load-balancer-controller.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;AWS Load balancer controller를 설치한 후 Service를 생성할 때 다음과 같이 ‘service.beta.kubernetes.io/aws-load-balancer-type: external’ annotation을 추가하면 AWS Load balancer controller를 이용하여 NLB를 생성할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Service&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nlb-sample-service&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nlb-sample-app&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;annotations&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;service.beta.kubernetes.io/aws-load-balancer-type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;external&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;service.beta.kubernetes.io/aws-load-balancer-nlb-target-type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ip&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;service.beta.kubernetes.io/aws-load-balancer-scheme&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;internet-facing&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;80&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;targetPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;80&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;TCP&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;LoadBalancer&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;AWS Load balancer controller를 사용하지 않으면 기본적으로 Kubernetes의 In-tree Service controller를 사용하여 AWS NLB를 생성한 것이어서 해당 annotation은 사용할 수 없다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;추가할-annotation&quot;&gt;추가할 annotation&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;service.beta.kubernetes.io/aws-load-balancer-manage-backend-security-group-rules: “false”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Service&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nlb-sample-service&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nlb-sample-app&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;annotations&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;service.beta.kubernetes.io/aws-load-balancer-type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;external&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;service.beta.kubernetes.io/aws-load-balancer-nlb-target-type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ip&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;service.beta.kubernetes.io/aws-load-balancer-scheme&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;internet-facing&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;	service.beta.kubernetes.io/aws-load-balancer-manage-backend-security-group-rules&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;false&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;80&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;targetPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;80&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;TCP&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;LoadBalancer&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 annotation을 추가 시 Controller가 Security group rule을 자동으로 추가/삭제하지 않기 때문에 꼭 Worker node의 Security group에 직접 Ingress rule을 넣어주어야 한다.&lt;/p&gt;

&lt;h3 id=&quot;정리&quot;&gt;정리&lt;/h3&gt;
&lt;p&gt;Kubernetes의 In-tree service controller는 NLB와 관련된 Security group rule을 자동으로 추가/삭제한다. 자동으로 Rule이 추가/삭제되지 않도록 하기 위해서는 AWS Load balancer controller를 이용하여 NLB타입의 서비스를 생성해야 하고, 이 때 ‘service.beta.kubernetes.io/aws-load-balancer-manage-backend-security-group-rules: false’ annotation을 추가하여 자동 제어 기능을 diable 할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;참고:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.4/guide/service/nlb/&quot;&gt;https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.4/guide/service/nlb/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/eks/latest/userguide/network-load-balancing.html&quot;&gt;https://docs.aws.amazon.com/eks/latest/userguide/network-load-balancing.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.4/guide/service/annotations/#manage-backend-sg-rules&quot;&gt;https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.4/guide/service/annotations/#manage-backend-sg-rules&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 16 Nov 2022 10:40:00 +0900</pubDate>
        <link>https://ga0-lee.github.io/posts/nlb-sg-rule/</link>
        <guid isPermaLink="true">https://ga0-lee.github.io/posts/nlb-sg-rule/</guid>
        
        <category>aws</category>
        
        <category>eks</category>
        
        <category>nlb</category>
        
        
        <category>AWS</category>
        
        <category>EKS</category>
        
      </item>
    
      <item>
        <title>vim 에러 Cannot create backup file(add ! to overwrite) 해결하기</title>
        <description>&lt;h2 id=&quot;vim-에러-cannot-create-backup-fileadd--to-overwrite-해결하기&quot;&gt;vim 에러 Cannot create backup file(add ! to overwrite) 해결하기&lt;/h2&gt;

&lt;h3 id=&quot;상황&quot;&gt;상황&lt;/h3&gt;
&lt;p&gt;vim 명령어로 파일을 수정하고 :wq로 저장하려 하면 아래와 같은 에러가 발생한다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Cannot create backup file(add ! to overwrite)
&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;이런 에러는 !를 입력하면 해결할 수 있지만 파일을 수정할 때마다 매번 발생하므로 번거롭기 때문에 해당 에러 메세지가 나오지 않도록 해결해야 한다.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;해결-방법&quot;&gt;해결 방법&lt;/h3&gt;

&lt;p&gt;.vim 디렉토리에 backups 디렉토리를 생성해준다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/.vim 
&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;backups
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 더이상 해당 에러 메세지가 출력되지 않고 :wq만으로도 수정이 잘 된다.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;참고&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/8428210/cannot-create-backup-fileadd-to-overwrite&quot;&gt;https://stackoverflow.com/questions/8428210/cannot-create-backup-fileadd-to-overwrite&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Tue, 15 Nov 2022 10:00:00 +0900</pubDate>
        <link>https://ga0-lee.github.io/posts/vim-backup-error/</link>
        <guid isPermaLink="true">https://ga0-lee.github.io/posts/vim-backup-error/</guid>
        
        <category>linux</category>
        
        <category>vim</category>
        
        
        <category>Linux</category>
        
      </item>
    
      <item>
        <title>EKS에 Kubernetes Dashboard 배포하기</title>
        <description>&lt;h2 id=&quot;eks에-kubernetes-dashboard-배포하기&quot;&gt;EKS에 Kubernetes Dashboard 배포하기&lt;/h2&gt;

&lt;h3 id=&quot;상황&quot;&gt;상황&lt;/h3&gt;

&lt;p&gt;AWS EKS에 Kubernetes Dashboard를 배포하여 관리하고자 한다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;현 사이트의 경우 보안상의 이유로 Proxy를 통해 Kubernetes Dashboard에 접속해야 한다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그래서 아래와 같은 경로를 통해 Kubernetes Dashboard Pod에 도달하게 된다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;PC -&amp;gt; Proxy Server(Nginx) -&amp;gt; Ingress Controller -&amp;gt; Ingress -&amp;gt; Kubernetes Dashboard Service -&amp;gt; Kubernetes Dashboard Pod
&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Kubernetes Dashboard는 무조건 https로 접속해야 하는데 앞쪽의 Ingress 또는 Proxy server 등에서 ssl 처리를 해주면 Kubernetes Dashboard 자체는 http로 설정이 가능하다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그래서 나는 제일 앞단에 있는 Nginx에 ssl 설정을 해줄 것이다.&lt;/p&gt;

&lt;h3 id=&quot;kubernetes-dashboard-배포하기&quot;&gt;Kubernetes Dashboard 배포하기&lt;/h3&gt;

&lt;p&gt;먼저 Kubernetes Dashboard를 배포해보자.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.Kubernetes Dashboard yaml 파일을 다운받는다.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;wget https://raw.githubusercontent.com/kubernetes/dashboard/v2.4.0/aio/deploy/recommended.yaml -O k8s-dashboard.yaml&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;2.아래와 같이 포트 및 옵션을 수정하여 배포한다.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;포트는 편의를 위해 모두 8001로 변경한다.&lt;/li&gt;
  &lt;li&gt;아래의 예시는 수정할 부분만 가져온 것이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Service&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;k8s-app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kubernetes-dashboard&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kubernetes-dashboard&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kubernetes-dashboard&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8001&lt;/span&gt;                  &lt;span class=&quot;c1&quot;&gt;# 포트 수정&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;targetPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8001&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;# 포트 수정&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;k8s-app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kubernetes-dashboard&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Deployment&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;apps/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;k8s-app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kubernetes-dashboard&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kubernetes-dashboard&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kubernetes-dashboard&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;replicas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;revisionHistoryLimit&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;matchLabels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;k8s-app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kubernetes-dashboard&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;k8s-app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kubernetes-dashboard&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;securityContext&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;seccompProfile&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;RuntimeDefault&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kubernetes-dashboard&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kubernetesui/dashboard:v2.7.0&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;imagePullPolicy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Always&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;containerPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8001&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;# 포트 수정&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;TCP&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;#- --auto-generate-certificates       # 주석 처리&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;--namespace=kubernetes-dashboard&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# namespace를 설정한다&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;			&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;--insecure-bind-address=0.0.0.0&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;# 모든 http 접속을 허용한다 (추가)&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;--enable-insecure-login&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;# http 로그인 허용한다 (추가)&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;--token-ttl=10800&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;# 토큰 세션 유지시간 - 선택 사항임&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;# Uncomment the following line to manually specify Kubernetes API server Host&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;# If not specified, Dashboard will attempt to auto discover the API server and connect&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;# to it. Uncomment only if the default does not work.&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;# - --apiserver-host=http://my-address:port&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;          &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;volumeMounts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kubernetes-dashboard-certs&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;mountPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/certs&lt;/span&gt;
              &lt;span class=&quot;c1&quot;&gt;# Create on-disk volume to store exec logs&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;mountPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/tmp&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;tmp-volume&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;livenessProbe&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;httpGet&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;scheme&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;HTTP&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# http로 변경&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8001&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;# 포트 수정&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;initialDelaySeconds&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;30&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;timeoutSeconds&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;30&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 변경한 후 배포한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;kubectl apply -f k8s-dashboard.yaml&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;kubernetes-dashboard용-ingress-배포하기&quot;&gt;Kubernetes Dashboard용 Ingress 배포하기&lt;/h3&gt;

&lt;p&gt;위에서 배포한 Kubernetes Dashboard로 라우팅 되도록 Ingress를 배포한다.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;networking.k8s.io/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Ingress&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kubernetes-dashboard&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kubernetes-dashboard&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;annotations&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;kubernetes.io/ingress.class&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;nginx&quot;&lt;/span&gt; 
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;k8s-dashboard.com&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
&lt;span class=&quot;err&quot;&gt;	&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;backend&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kubernetes-dashboard&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;9090&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;		&lt;/span&gt;  
        &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;pathType&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Prefix&lt;/span&gt;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;kubectl apply -f k8s-dashboard-ingress.yaml&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;kubernetes-dashboard에-eks-권한-부여하기&quot;&gt;Kubernetes Dashboard에 EKS 권한 부여하기&lt;/h3&gt;

&lt;p&gt;기본적으로 Kubernetes Dashboard 사용자의 권한은 제한되어 있다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그래서 eks-admin이라는 이름으로 Service Account 및 Cluster Role Binding를 생성하고, 이를 사용하여 관리자 권한으로 Dashboard에 연결할 것이다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;아래와 같이 Service Account와 Cluster Role Binding를 생성한다. &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ServiceAccount&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eks-admin&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kube-system&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;rbac.authorization.k8s.io/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ClusterRoleBinding&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eks-admin&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;roleRef&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;apiGroup&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;rbac.authorization.k8s.io&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ClusterRole&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cluster-admin&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;subjects&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ServiceAccount&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eks-admin&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kube-system&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;kubectl apply -f eks-admin-service-account.yaml&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;nginx에-ssl-설정하기&quot;&gt;Nginx에 ssl 설정하기&lt;/h3&gt;

&lt;p&gt;Kubernetes Dashboard는 무조건 https 통신이 돼야 하는데 이를 nginx에서 처리할 수도 있다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그래서 openssl 명령어로 사설 인증서를 생성한 후 Nginx에 ssl 설정을 해보자.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;openssl 명령어로 key 발급하기&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# private key와 인증서를 발급한다. 아래 명령어를 입력하면 국가부터 회사까지 각종 정보를 입력해야 한다.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;openssl req &lt;span class=&quot;nt&quot;&gt;-new&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-newkey&lt;/span&gt; rsa:2048 &lt;span class=&quot;nt&quot;&gt;-nodes&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-keyout&lt;/span&gt; k8s-dashboard.key &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; k8s-dashboard.csr

&lt;span class=&quot;c&quot;&gt;# 위에서 발급한 private key와 csr 키를 통해 crt 키를 발급한다.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;openssl x509 &lt;span class=&quot;nt&quot;&gt;-req&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-days&lt;/span&gt; 365 &lt;span class=&quot;nt&quot;&gt;-in&lt;/span&gt; k8s-dashboard.csr &lt;span class=&quot;nt&quot;&gt;-signkey&lt;/span&gt; k8s-dashboard.key &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; k8s-dashboard.crt

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Nginx에 ssl 설정하기&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;upstream k8s-dashboard &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  least_conn&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# Ingress Controller Service IPs&lt;/span&gt;
  server 10.123.45.678:80&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  server 10.123.45.679:80&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
server &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# ssl on 대신 listen 구문 마지막에 ssl을 넣는 것으로 변경됨.&lt;/span&gt;
        listen 443 ssl&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        server_name k8s-dashboard.com&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        charset utf-8&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		
        access_log /etc/nginx/log/access.log&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        error_log /etc/nginx/log/error.log&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        
		&lt;span class=&quot;c&quot;&gt;#ssl 인증서 적용&lt;/span&gt;
        ssl_certificate /etc/nginx/ssl/k8s-dashboard.crt&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;        &lt;span class=&quot;c&quot;&gt;#생성된 인증서경로&lt;/span&gt;
        ssl_certificate_key /etc/nginx/ssl/k8s-dashboard.key&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;#생성된 개인키&lt;/span&gt;
        
		location / &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                proxy_set_header Host &lt;span class=&quot;nv&quot;&gt;$host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                proxy_set_header X-Real-IP &lt;span class=&quot;nv&quot;&gt;$remote_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                proxy_set_header X-Scheme &lt;span class=&quot;nv&quot;&gt;$scheme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				
                proxy_pass http://k8s-dashboard&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Host 설정하기&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;nginx에 ssl 설정까지 마쳤으면 이제 hosts 파일에 설정한 Kubernetes Dashboard 도메인과 Nginx 서버 IP를 매핑해줘야 한다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;vi /etc/hosts

&lt;span class=&quot;c&quot;&gt;# 웹서버 IP      # Kubernetes Dashboard 도메인&lt;/span&gt;
10.111.22.333  k8s-dashboard.com
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;kubernetes-dashboard에-접속하기&quot;&gt;Kubernetes Dashboard에 접속하기&lt;/h3&gt;

&lt;p&gt;주의사항: 반드시 https로 접속해야 한다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위에서 설정한 도메인으로 접속하면 아래와 같은 UI가 뜬다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;https://k8s-dashboard.com&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/67899732/209635254-b6a71ca7-6c97-49fc-8928-7624d078984f.png&quot; alt=&quot;k8s&quot; /&gt;&lt;/p&gt;

&lt;p&gt;로그인은 위에서 생성한 eks-admin token 값으로 로그인을 할 것이다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;
&lt;span class=&quot;c&quot;&gt;# Token 확인 명령어&lt;/span&gt;
kubectl &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; kube-system describe secret &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;kubectl &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; kube-system get secret | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;eks-admin | &lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{print $1}'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 출력 예시&lt;/span&gt;
Name:         eks-admin-token-b5zv4
Namespace:    kube-system
Labels:       &amp;lt;none&amp;gt;
Annotations:  kubernetes.io/service-account.name&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;eks-admin
              kubernetes.io/service-account.uid&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;bcfe66ac-39be-11e8-97e8-026dce96b6e8

Type:  kubernetes.io/service-account-token

Data
&lt;span class=&quot;o&quot;&gt;====&lt;/span&gt;
ca.crt:     1025 bytes
namespace:  11 bytes
token:      &amp;lt;token 값&amp;gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;위에서 출력된 token 값을 복사하여 로그인 한다.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/67899732/209636495-c85dadaa-68dd-48cb-9690-0c7ec7efec06.png&quot; alt=&quot;k8s2&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;로그인 하면 위와 같은 화면이 뜬다. 여기서 원하는 리소스를 골라 확인할 수 있다.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;끝.&lt;/p&gt;

&lt;p&gt;참고&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;[https://docs.aws.amazon.com/ko_kr/eks/latest/userguide/dashboard-tutorial.html] (https://docs.aws.amazon.com/ko_kr/eks/latest/userguide/dashboard-tutorial.html)&lt;/li&gt;
  &lt;li&gt;[https://csupreme19.github.io/devops/kubernetes/2021/03/04/kubernetes-dashboard.htm] (https://csupreme19.github.io/devops/kubernetes/2021/03/04/kubernetes-dashboard.html)&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 15 Nov 2022 10:00:00 +0900</pubDate>
        <link>https://ga0-lee.github.io/posts/k8s-dashboard/</link>
        <guid isPermaLink="true">https://ga0-lee.github.io/posts/k8s-dashboard/</guid>
        
        <category>k8s</category>
        
        <category>eks</category>
        
        
        <category>Kubernetes</category>
        
        <category>Cases</category>
        
      </item>
    
      <item>
        <title>helm 개념 및 기본 사용법</title>
        <description>&lt;h2 id=&quot;helm-개념-및-기본-사용법&quot;&gt;helm 개념 및 기본 사용법&lt;/h2&gt;

&lt;h3 id=&quot;용어&quot;&gt;용어&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Chart: 패키지 같은 것&lt;/li&gt;
  &lt;li&gt;Release: 차트를 배포한 인스턴스 -&amp;gt; 여러 개 가능&lt;/li&gt;
  &lt;li&gt;built in object: 빌트 인 객체 -&amp;gt; 객체를 가지고 yaml 파일의 값을 지정할 수 있다.
    &lt;ul&gt;
      &lt;li&gt;ex) {{ .Release.Name }}&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;기본-명령어&quot;&gt;기본 명령어&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# Chart 생성하기&lt;/span&gt;
helm create &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;chart명]

&lt;span class=&quot;c&quot;&gt;# Release 이름 지정해서 생성하기&lt;/span&gt;
helm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;release명] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;chart_dir_path] 
&lt;span class=&quot;c&quot;&gt;# Release 이름은 자동으로 주고 생성하기&lt;/span&gt;
helm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;chart_dir_path] &lt;span class=&quot;nt&quot;&gt;--generate-name&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Release 생성 dry-run&lt;/span&gt;
helm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;release명] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;chart_dir_path] &lt;span class=&quot;nt&quot;&gt;--dry-run&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--debug&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Release 생성시 변수로 들어가는 값 직접 지정하기&lt;/span&gt;
helm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;release명] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;chart_dir_path] &lt;span class=&quot;nt&quot;&gt;--set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;value]

&lt;span class=&quot;c&quot;&gt;# Release 목록 출력&lt;/span&gt;
helm list

&lt;span class=&quot;c&quot;&gt;# Release의 manifest 확인하기&lt;/span&gt;
helm get manifest &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;release명]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;참고
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://helm.sh/ko/docs/chart_template_guide/getting_started/&quot;&gt;https://helm.sh/ko/docs/chart_template_guide/getting_started/&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Tue, 15 Nov 2022 10:00:00 +0900</pubDate>
        <link>https://ga0-lee.github.io/posts/helm-basic/</link>
        <guid isPermaLink="true">https://ga0-lee.github.io/posts/helm-basic/</guid>
        
        <category>k8s</category>
        
        <category>helm</category>
        
        
        <category>Kubernetes</category>
        
        <category>Helm</category>
        
      </item>
    
      <item>
        <title>fluent-bit의 parser에 사용된 정규식 파악하기</title>
        <description>&lt;h2 id=&quot;fluent-bit의-parser에-사용된-정규식-파악하기&quot;&gt;fluent-bit의 parser에 사용된 정규식 파악하기&lt;/h2&gt;

&lt;p&gt;fluent-bit의 parser에 사용된 정규식 파악하기&lt;/p&gt;

&lt;p&gt;참고&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://idreamtbest.tistory.com/71&quot;&gt;https://idreamtbest.tistory.com/71&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://sweeper.egloos.com/3064808&quot;&gt;http://sweeper.egloos.com/3064808&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 03 Nov 2022 11:00:00 +0900</pubDate>
        <link>https://ga0-lee.github.io/posts/regex/</link>
        <guid isPermaLink="true">https://ga0-lee.github.io/posts/regex/</guid>
        
        <category>k8s</category>
        
        <category>fluent-bit</category>
        
        
        <category>Kubernetes</category>
        
        <category>Cases</category>
        
      </item>
    
      <item>
        <title>Fluent-bit의 parser에 사용된 정규식 파악하기</title>
        <description>&lt;h2 id=&quot;fluent-bit의-parser에-사용된-정규식-파악하기&quot;&gt;Fluent-bit의 parser에 사용된 정규식 파악하기&lt;/h2&gt;

&lt;h3 id=&quot;fluent-bit의-parser란&quot;&gt;Fluent-bit의 parser란&lt;/h3&gt;

&lt;p&gt;Parser는 …
&lt;a href=&quot;https://docs.fluentbit.io/manual/pipeline/filters/parser&quot;&gt;https://docs.fluentbit.io/manual/pipeline/filters/parser&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;fluent-bit-parser에-적용된-정규식-파헤쳐보기&quot;&gt;Fluent-bit parser에 적용된 정규식 파헤쳐보기&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;PARSER]
    Name multiline
    Format regex
    Regex /&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;?&amp;lt;&lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;Dec &lt;span class=&quot;se&quot;&gt;\d&lt;/span&gt;+ &lt;span class=&quot;se&quot;&gt;\d&lt;/span&gt;+&lt;span class=&quot;se&quot;&gt;\:\d&lt;/span&gt;+&lt;span class=&quot;se&quot;&gt;\:\d&lt;/span&gt;+&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;?&amp;lt;message&amp;gt;.&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;/
    Time_Key  &lt;span class=&quot;nb&quot;&gt;time
    &lt;/span&gt;Time_Format %b %d %H:%M:%S

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;참고&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://idreamtbest.tistory.com/71&quot;&gt;https://idreamtbest.tistory.com/71&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://sweeper.egloos.com/3064808&quot;&gt;http://sweeper.egloos.com/3064808&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 03 Nov 2022 10:00:00 +0900</pubDate>
        <link>https://ga0-lee.github.io/posts/fluent-bit-parser/</link>
        <guid isPermaLink="true">https://ga0-lee.github.io/posts/fluent-bit-parser/</guid>
        
        <category>k8s</category>
        
        
        <category>Kubernetes</category>
        
        <category>Cases</category>
        
      </item>
    
      <item>
        <title>폐쇄망에서 busybox 설치하여 k8s Pod 배포하기</title>
        <description>&lt;h2 id=&quot;폐쇄망에서-busybox-설치하여-k8s-pod-배포하기&quot;&gt;폐쇄망에서 busybox 설치하여 k8s Pod 배포하기&lt;/h2&gt;
&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Nginx를 배포하기 위한 ConfigMap, Deployment, Service를 yaml 파일로 작성한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;참고 : [https://hub.docker.com/&lt;em&gt;/nginx](https://hub.docker.com/&lt;/em&gt;/nginx)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Wed, 02 Nov 2022 11:00:00 +0900</pubDate>
        <link>https://ga0-lee.github.io/posts/k8s-busybox-offline-install/</link>
        <guid isPermaLink="true">https://ga0-lee.github.io/posts/k8s-busybox-offline-install/</guid>
        
        <category>k8s</category>
        
        <category>nginx</category>
        
        
        <category>Nginx</category>
        
      </item>
    
      <item>
        <title>Nginx 413 에러</title>
        <description>&lt;h2 id=&quot;nginx-413-에러&quot;&gt;Nginx 413 에러&lt;/h2&gt;

&lt;h3 id=&quot;상황&quot;&gt;상황&lt;/h3&gt;
&lt;p&gt;AWS S3로 파일을 이관하는 테스트 중 413 에러가 발생했다.&lt;/p&gt;

&lt;p&gt;파일이 S3로 업로드되는 라우팅경로는 다음과 같다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;인터넷 –&amp;gt; Nginx-ingress-controller(AWS EKS에 배포) –&amp;gt; k8s ingress –&amp;gt; nginx-pod(proxy server) –&amp;gt; upload-pod –&amp;gt; AWS S3 bucket&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;413-에러란&quot;&gt;413 에러란?&lt;/h3&gt;

&lt;p&gt;Nginx에 설정된 허용 파일 크기보다 요청한 파일의 크기가 더 커서 발생하는 에러이다.&lt;/p&gt;

&lt;h3 id=&quot;해결법&quot;&gt;해결법&lt;/h3&gt;
&lt;p&gt;이번 경우는 Nginx ingress controller에도 설정을 해야 하고, 프록시 서버로 사용 중인 Nginx Pod에도 설정을 해야 한다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Nginx에 설정
    &lt;ul&gt;
      &lt;li&gt;nginx.conf 파일에 client_max_body_size를 원하는 크기로 설정해주면 된다.&lt;/li&gt;
      &lt;li&gt;client_max_body_size의 기본 값은 1M이다.&lt;/li&gt;
      &lt;li&gt;http, server, location block 어디든 설정이 가능하다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;http&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  client_max_body_size 100M&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  ...
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Nginx-ingress-controller에 설정
    &lt;ul&gt;
      &lt;li&gt;k8s에 배포한 ingress에 주석(annotation)으로 설정해주면 모든 ingress controller Pod에 적용된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;kubectl edit ingress ingress-name
&lt;span class=&quot;c&quot;&gt;# kubectl edit 후 아래 annotation 추가&lt;/span&gt;
nginx.ingress.kubernetes.io/proxy-body-size: 8m
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;참고
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/HTTP/Status/413&quot;&gt;https://developer.mozilla.org/ko/docs/Web/HTTP/Status/413&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/annotations/#custom-max-body-size&quot;&gt;https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/annotations/#custom-max-body-size&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 01 Nov 2022 11:00:00 +0900</pubDate>
        <link>https://ga0-lee.github.io/posts/Nginx-413-error/</link>
        <guid isPermaLink="true">https://ga0-lee.github.io/posts/Nginx-413-error/</guid>
        
        <category>k8s</category>
        
        <category>nginx</category>
        
        
        <category>Nginx</category>
        
      </item>
    
      <item>
        <title>kubectl top 명령어로 Pod와 Node의 메트릭 확인하기</title>
        <description>&lt;h2 id=&quot;kubectl-top으로-pod와-node의-메트릭-확인하기&quot;&gt;kubectl top으로 Pod와 Node의 메트릭 확인하기&lt;/h2&gt;

&lt;h3 id=&quot;metrics-server-배포하기&quot;&gt;Metrics-server 배포하기&lt;/h3&gt;

&lt;p&gt;먼저, kubectl top 명령어를 사용하려면 metrics-server를 배포해야 한다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# 배포하기&lt;/span&gt;
kubectl apply &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
&lt;span class=&quot;c&quot;&gt;# 배포 확인&lt;/span&gt;
kubectl get deployment metrics-server &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; kube-system
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;pod와-node-메트릭-확인하기&quot;&gt;Pod와 Node 메트릭 확인하기&lt;/h3&gt;

&lt;p&gt;linux에서 top 명령어를 통해 프로세스의 cpu와 memory 사용률을 확인할 수 있는 것처럼 &lt;br /&gt;
kubernetes상에서도 kubectl top 명령어를 통해 Pod와 Node의 cpu와 memory 사용률을 확인할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# pod의 사용 중인 cpu, memory 확인하기&lt;/span&gt;
kubectl top pod &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; test-namespace
&lt;span class=&quot;c&quot;&gt;# nginx pod의 메트릭만 출력하기&lt;/span&gt;
kubectl top pod &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; test-namespace | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;nginx  

&lt;span class=&quot;c&quot;&gt;# watch 명령어를 활용해 메트릭 모니터링 하기&lt;/span&gt;
watch &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; 1 &lt;span class=&quot;s1&quot;&gt;'kubectl top pod -n test-namespace'&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 특정 pod의 메트릭만 모니터링 하기&lt;/span&gt;
watch &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; 1 &lt;span class=&quot;s1&quot;&gt;'kubectl top pod -n test-namespace | grep nginx'&lt;/span&gt;  

&lt;span class=&quot;c&quot;&gt;# node 메트릭 확인하기&lt;/span&gt;
kubectl top node
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;kubectl top pod 명령어로는 사용 중인 cpu, memory 수만 출력되지만 kubectl top node 명령어로는 사용률도 출력된다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;참고&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/kubernetes-sigs/metrics-server&quot;&gt;https://github.com/kubernetes-sigs/metrics-server&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Mon, 31 Oct 2022 10:00:00 +0900</pubDate>
        <link>https://ga0-lee.github.io/posts/k8s-top/</link>
        <guid isPermaLink="true">https://ga0-lee.github.io/posts/k8s-top/</guid>
        
        <category>k8s</category>
        
        
        <category>Kubernetes</category>
        
        <category>Cases</category>
        
      </item>
    
      <item>
        <title>Stern을 설치하여 k8s pod 로그 쉽게 보기</title>
        <description>&lt;h2 id=&quot;stern을-설치하여-k8s-multiple-pod-로그-쉽게-보기&quot;&gt;Stern을 설치하여 k8s multiple pod 로그 쉽게 보기&lt;/h2&gt;

&lt;h3 id=&quot;stern이란&quot;&gt;Stern이란?&lt;/h3&gt;

&lt;p&gt;Stern은 Multiple Pods 또는 Multiple Containers 의 로그를 한 번에 볼 수 있게 하는 Golang 기반의 도구.&lt;/p&gt;

&lt;p&gt;기본적으로는 kubectl logs -n namespace pod_id 명령어로는 하나의 Pod 또는 하나의 Container의 로그만 가능해서 보통 여러 개의 Pod나 Container 로그를 보려면 터미널 창을 여러 개 띄워서 봤었다.
그러나 이런 방식은 명령어도 여러 번 입력해야 하고 불편한 점이 많아 이번에 Stern을 통해 간단하게 로그를 보고자 한다.&lt;/p&gt;

&lt;h3 id=&quot;stern-설치-과정&quot;&gt;Stern 설치 과정&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Golang 설치&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# Golang 설치&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get update
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;golang
&lt;span class=&quot;c&quot;&gt;# 설치 확인&lt;/span&gt;
which go
&lt;span class=&quot;c&quot;&gt;# golang 환경변수 확인&lt;/span&gt;
go &lt;span class=&quot;nb&quot;&gt;env&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; GOPATH가 설정되어 있지 않으면 원하는 &lt;span class=&quot;nb&quot;&gt;dir &lt;/span&gt;경로 설정
&lt;span class=&quot;c&quot;&gt;# golang 환경변수 설정은 go env -w &amp;lt;환경변수명&amp;gt;=&amp;lt;값&amp;gt; 으로 한다. &lt;/span&gt;
go &lt;span class=&quot;nb&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-w&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;GOPATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/home/user/go
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;Golang에서는 GOPATH에 설정된 dir을 기준으로 의존성 라이브러리를 관리한다.&lt;/li&gt;
  &lt;li&gt;의존성 라이브러리를 설치하는 방법은 go get &lt;repo&gt; 명령어이고 해당 명령어를 실행하면 GAPATH 경로에 의존성 라이브러리들이 다운로드된다.&lt;/repo&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;Govendor 설치&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# govendor 다운로드&lt;/span&gt;
go get &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; github.com/kardianos/govendor
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Stern 설치&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# Stern 설치&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$GOPATH&lt;/span&gt;/src/github.com/wercker
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$GOPATH&lt;/span&gt;/src/github.com/wercker
git clone https://github.com/wercker/stern.git &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;stern
govendor &lt;span class=&quot;nb&quot;&gt;sync
&lt;/span&gt;go &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#설치 확인&lt;/span&gt;
stern
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;stern-사용법&quot;&gt;Stern 사용법&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# test라는 글자가 들어간 모든 pods의 log 보기&lt;/span&gt;
stern &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--all-namespaces&lt;/span&gt;
stern &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; test-namespace
&lt;span class=&quot;c&quot;&gt;# label이 nginx인 pods의 log 보기&lt;/span&gt;
stern &lt;span class=&quot;nt&quot;&gt;--all-namespaces&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;nginx
stern &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; test-namespace &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;nginx
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;더-쉬운-stern-설치법&quot;&gt;더 쉬운 Stern 설치법&lt;/h3&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; /usr/local/bin/stern &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  https://github.com/wercker/stern/releases/download/1.10.0/stern_linux_amd64
&lt;span class=&quot;nb&quot;&gt;sudo chmod&lt;/span&gt; +x /usr/local/bin/stern
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt; &lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;참고
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/wercker/stern&quot;&gt;https://github.com/wercker/stern&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://devcenter.heroku.com/articles/go-dependencies-via-govendor&quot;&gt;https://devcenter.heroku.com/articles/go-dependencies-via-govendor&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://blog.naver.com/alice_k106/221618543021&quot;&gt;https://blog.naver.com/alice_k106/221618543021&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;stern-외-다른-multi-log-tool&quot;&gt;Stern 외 다른 Multi log tool&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;dl&gt;
      &lt;dt&gt;참고&lt;/dt&gt;
      &lt;dd&gt;&lt;a href=&quot;https://stackoverflow.com/questions/62569038/how-to-get-logs-of-two-pods-without-opening-two-terminals-and-using-kubectl-tail&quot;&gt;https://stackoverflow.com/questions/62569038/how-to-get-logs-of-two-pods-without-opening-two-terminals-and-using-kubectl-tail&lt;/a&gt;&lt;/dd&gt;
    &lt;/dl&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 20 Oct 2022 10:00:00 +0900</pubDate>
        <link>https://ga0-lee.github.io/posts/stern/</link>
        <guid isPermaLink="true">https://ga0-lee.github.io/posts/stern/</guid>
        
        <category>k8s</category>
        
        
        <category>Kubernetes</category>
        
        <category>Cases</category>
        
      </item>
    
      <item>
        <title>AWS EKS Worker Node에 Customized된 설정 적용하기</title>
        <description>&lt;h2 id=&quot;aws-eks-worker-node에-customized된-설정-적용하기&quot;&gt;AWS EKS Worker Node에 Customized된 설정 적용하기&lt;/h2&gt;

&lt;h3 id=&quot;상황&quot;&gt;상황&lt;/h3&gt;

&lt;p&gt;push 발송 등으로 인해 동접자 수 증가 대응을 위해 Nignx 기반의 서비스의 worker_conneections 값과 OS 커널 파라미터 수정이 필요하다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;즉, EKS Worker Node의 파라미터를 변경해야 한다.&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;[변경할 파라미터 값]&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;/etc/sysctl.conf
    &lt;blockquote&gt;
      &lt;blockquote&gt;
        &lt;p&gt;fs.file-max = 3244429&lt;/p&gt;
      &lt;/blockquote&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;etc/security/limits.conf
    &lt;blockquote&gt;
      &lt;blockquote&gt;
        &lt;p&gt;ec2-user  soft  nofile  4096
ec2-user  hard  nofile  10240&lt;/p&gt;
      &lt;/blockquote&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;eks-node-group-시작템플릿-변경하기&quot;&gt;EKS Node Group 시작템플릿 변경하기&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;dl&gt;
      &lt;dt&gt;시작템플릿을 변경하는 이유?&lt;/dt&gt;
      &lt;dd&gt;Worker Node 내에 Customized된 설정을 적용하기 위해서는 AWS EC2에서 제공하는 UserData라는 기능을 사용하여 인스턴스 시작 시 원하는 명령어가 실행될 수 있도록 해야 한다.
그렇기 때문에 현재 Node Group의 시작템플릿에 UserData를 적용한 새로운 버전의 템플릿으로 업데이트하거나 템플릿 자체를 새로 생성하여 Worker Node를 재생성해야 한다.
(1)시작 템플릿 버전 업데이트는 사용자 지정 시작 템플릿을 사용 하였을때만 가능
(2)EKS Optimized AMI를 사용하는 경우 새로운 시작 템플릿을 생성하여 적용&lt;/dd&gt;
    &lt;/dl&gt;
  &lt;/li&gt;
  &lt;li&gt;나의 경우 (2)에 해당하므로 새로 UserData를 적용한 새로운 시작 템플릿을 생성하였다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[과정]&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;새로운 시작 템플릿을 생성한다.
    &lt;ul&gt;
      &lt;li&gt;EC2 대쉬보드 -&amp;gt; 인스턴스 -&amp;gt; 시작 템플릿 -&amp;gt; 시작 템플릿 생성&lt;/li&gt;
      &lt;li&gt;AMI는 현재 사용 중인 EKS Optimized AMI를 선택 및 나머지 세부 사항은 기존 설정 그대로&lt;/li&gt;
      &lt;li&gt;고급세부정보 -&amp;gt; 사용자 데이터(UserData)에 bootstrap.sh  스크립트가 실행될 수 있도록 필요한 명령어와 함께 입력 -&amp;gt; 생성&lt;/li&gt;
      &lt;li&gt;bootstrap.sh 스크립트가 실행될 수 있도록 입력하는 이유는 생성되는 인스턴스가 EKS 클러스터에 조인되도록 하기 위함이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;MIME-Version: 1.0
Content-Type: multipart/mixed&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;boundary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;==MYBOUNDARY==&quot;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;MYBOUNDARY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;
Content-Type: text/x-shellscript&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;charset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;us-ascii&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'fs.file-max = 3244429'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; /etc/sysctl.conf
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ec2-user  soft  nofile  4096'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; /etc/security/limits.conf
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ec2-user  hard  nofile  10240'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; /etc/security/limits.conf

&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-ex&lt;/span&gt;
/etc/eks/bootstrap.sh &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;클러스터 이름&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--apiserver-endpoint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;EKS API server endpoint&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;nt&quot;&gt;--b64-cluster-ca&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;Certificate authority&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;MYBOUNDARY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;방금 새로 생성한 시작 템플릿을 사용하는 새로운 노드 그룹을 생성한다.
    &lt;ul&gt;
      &lt;li&gt;EKS 대쉬보드 -&amp;gt; 클러스터 -&amp;gt; 컴퓨팅 -&amp;gt; 노드 그룹 -&amp;gt; 노드 그룹 추가&lt;/li&gt;
      &lt;li&gt;시작 템플릿 사용 -&amp;gt; 위에서 생성한 시작 템플릿 지정 및 세부 사항 입력 -&amp;gt; 생성&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;새로운 노드 그룹의 노드가 모두 Ready 상태가 된 것을 확인한 후 필요하면 이전 노드 그룹을 삭제한다.&lt;/li&gt;
  &lt;li&gt;적용된 커널 파라미터 확인
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /etc/sysctl.conf
&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /etc/security/limits.conf
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;주의할-점&quot;&gt;주의할 점&lt;/h3&gt;

&lt;p&gt;Node Group에 적용된 시작 템플릿과 해당 Node Groupd의 AutoScalingGroup(이하 ASG)이 사용하는 시작 템플릿이 별개로 있는데,
변경해야 할 시작 템플릿은 Node Group 대쉬보드에서 바로 보이는 시작 템플릿이고 ASG에 할당된 시작 템플릿은 변경하지 않아야 한다.
왜냐하면 ASG는 Managed Node Group 설정에 따라 EKS에서 자동으로 생성/변경하므로 사용자의 Custom한 변경이 이루어지지 않도록 AWS측에서 권장하기 때문이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;참고
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/ko_kr/eks/latest/userguide/eks-optimized-ami.html&quot;&gt;https://docs.aws.amazon.com/ko_kr/eks/latest/userguide/eks-optimized-ami.html&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/ko_kr/eks/latest/userguide/launch-templates.html#launch-template-custom-ami&quot;&gt;https://docs.aws.amazon.com/ko_kr/eks/latest/userguide/launch-templates.html#launch-template-custom-ami&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/ko_kr/eks/latest/userguide/create-managed-node-group.html&quot;&gt;https://docs.aws.amazon.com/ko_kr/eks/latest/userguide/create-managed-node-group.html&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/ko/premiumsupport/knowledge-center/eks-resolve-node-group-errors-in-cluster/&quot;&gt;https://aws.amazon.com/ko/premiumsupport/knowledge-center/eks-resolve-node-group-errors-in-cluster/&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Thu, 20 Oct 2022 10:00:00 +0900</pubDate>
        <link>https://ga0-lee.github.io/posts/EKS-template/</link>
        <guid isPermaLink="true">https://ga0-lee.github.io/posts/EKS-template/</guid>
        
        <category>aws</category>
        
        <category>eks</category>
        
        
        <category>AWS</category>
        
        <category>EKS</category>
        
      </item>
    
      <item>
        <title>AWS NLB로 배포한 K8s Service가 Pending 상태에서 지워지지 않는 문제</title>
        <description>&lt;h2 id=&quot;aws-nlb로-배포한-k8s-service가-pending-상태에서-지워지지-않는-문제-해결&quot;&gt;AWS NLB로 배포한 K8s Service가 Pending 상태에서 지워지지 않는 문제 해결&lt;/h2&gt;

&lt;h3 id=&quot;상황&quot;&gt;상황&lt;/h3&gt;

&lt;p&gt;AWS Load Balancer Controller를 사용하기 위해 Service를 LB 타입(AWS NLB)으로 배포하였으나, External IP가 생성되지 않으면서 Pending 상태에서 멈춰있음&lt;/p&gt;

&lt;h3 id=&quot;시도&quot;&gt;시도&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;kubectl delete svc &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; kube-system aws-load-balancer-service &lt;span class=&quot;nt&quot;&gt;--force&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;결과: 지워지지 않음&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;kubectl edit svc &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; kube-system aws-load-balancer-service
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; Type을 NodePort, ClusterIP로 변경
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 지정된 온갖 Annotation을 지움
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 그 후 delete 시도
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;결과: 지워지지 않음&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;해결법&quot;&gt;해결법&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;kubectl edit svc &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; kube-system aws-load-balancer-service
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; finalizer를 지움
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 그 후 delete 시도
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;결과: 드디어 지워짐!!!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;참고: &lt;a href=&quot;https://stackoverflow.com/questions/61931602/cannot-delete-kubernetes-service-with-no-deployment&quot;&gt;https://stackoverflow.com/questions/61931602/cannot-delete-kubernetes-service-with-no-deployment&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 08 Oct 2022 11:00:00 +0900</pubDate>
        <link>https://ga0-lee.github.io/posts/k8s-pending-error/</link>
        <guid isPermaLink="true">https://ga0-lee.github.io/posts/k8s-pending-error/</guid>
        
        <category>k8s</category>
        
        <category>aws</category>
        
        
        <category>Kubernetes</category>
        
        <category>Errors</category>
        
      </item>
    
      <item>
        <title>K8s coredns로 Nginx Proxy 설정하기</title>
        <description>&lt;h2 id=&quot;k8s-coredns로-nginx-proxy-설정하기&quot;&gt;K8s coredns로 Nginx Proxy 설정하기&lt;/h2&gt;

&lt;h3 id=&quot;coredns란&quot;&gt;CoreDNS란?&lt;/h3&gt;

&lt;p&gt;CoreDNS는 쿠버네티스 클러스터의 DNS 역할을 수행할 수 있는, 유연하고 확장 가능한 DNS 서버이다.&lt;/p&gt;

&lt;p&gt;즉, K8s 클러스터에서 Pod와 Service에 할당된 도메인을 통해 요청이 들어오는 경우 해당 도메인을 알맞은 리소스의 IP로 변환하여 통신이 가능하게 해주는 것.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;Pod의 도메인=&quot;&quot;&gt;   
- Pod만 존재할 때: [파드의 IP주소].[네임스페이스명].pod.cluster.local     
- Pod를 Service로 노출시켰을 때: [파드의 IP주소].[서비스명].[네임스페이스명].svc.cluster-domain.example   
   
&lt;Service의 도메인=&quot;&quot;&gt;     
- [서비스명].[네임스페이스명].svc.cluster.local    
&lt;br /&gt; 
&lt;/Service의&gt;&lt;/Pod의&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;nginx-pod의-proxy-설정-예시&quot;&gt;Nginx Pod의 Proxy 설정 예시&lt;/h3&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ConfigMap&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;gateway-configmap&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;gateway-ns&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;TZ&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;UTC'&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;gateway-conf&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;# k8s coredns svc의 dns 입력 또는 coredns pod의 IP 입력&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;resolver kube-dns.kube-system.svc.cluster.local valid=5s;&lt;/span&gt;
            
            &lt;span class=&quot;s&quot;&gt;upstream test-svc{&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;server test-svc.test-ns.svc.cluster.local:80;&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;keepalive 32;&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;}&lt;/span&gt;

                &lt;span class=&quot;s&quot;&gt;server {&lt;/span&gt;
                   &lt;span class=&quot;s&quot;&gt;listen 80;&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;server_name k8s-test.com;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#요청하는 Host URL&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;proxy_http_version 1.1;&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# istio에서는 1.1이나 2만 사용하므로 1.1을 사용한다고 명시한다. &lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;&lt;/span&gt; 
                    &lt;span class=&quot;s&quot;&gt;proxy_set_header Connection &quot;&quot;;&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;client_max_body_size 300M;&lt;/span&gt;

                   
                   
                    &lt;span class=&quot;s&quot;&gt;# /로 오는 요청을 위에서 upstream으로 설정한 test-svc로 보냄.&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;location / {&lt;/span&gt;
                        &lt;span class=&quot;s&quot;&gt;root /usr/share/nginx/html;&lt;/span&gt;
                        &lt;span class=&quot;s&quot;&gt;index index.html index.html;&lt;/span&gt;
                        &lt;span class=&quot;s&quot;&gt;proxy_pass http://test-svc;&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;}&lt;/span&gt;


&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;위 config를 /etc/nginx/conf.d/ 하위에 마운트되도록 Deployment애 설정하면 된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;프록시-과정&quot;&gt;프록시 과정&lt;/h3&gt;

&lt;p&gt;http://k8s-test.com/ 로 오는 요청이 http://test-svc 로 프록시패스 되고 해당 test-svc는 쿠버네티스 클러스터의 test-ns Namespace에 배포된 test-svc Service이므로 결과적으로는 test-svc에 연결된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt; &lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;참고
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://kubernetes.io/ko/docs/concepts/services-networking/dns-pod-service/&quot;&gt;https://kubernetes.io/ko/docs/concepts/services-networking/dns-pod-service/&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://seungjuitmemo.tistory.com/271&quot;&gt;https://seungjuitmemo.tistory.com/271&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://arisu1000.tistory.com/27859&quot;&gt;https://arisu1000.tistory.com/27859&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 08 Oct 2022 10:00:00 +0900</pubDate>
        <link>https://ga0-lee.github.io/posts/k8s-coredns/</link>
        <guid isPermaLink="true">https://ga0-lee.github.io/posts/k8s-coredns/</guid>
        
        <category>k8s</category>
        
        
        <category>Kubernetes</category>
        
        <category>Cases</category>
        
      </item>
    
      <item>
        <title>Nginx를 k8s에 배포하기</title>
        <description>&lt;h2 id=&quot;nginx-배포용-yaml-파일&quot;&gt;Nginx 배포용 yaml 파일&lt;/h2&gt;
&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;Nginx를 배포하기 위한 ConfigMap, Deployment, Service를 yaml 파일로 작성한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[Nginx ConfigMap]&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;apiVersion: v1
kind: ConfigMap
metadata:
name: nginx-conf
data:
nginx.conf: |
    user nginx;
    worker_processes  3;
    error_log  /var/log/nginx/error.log;
    events {
    worker_connections  10240;
    }
    http {
    log_format  main
            'remote_addr:$remote_addr\t'
            'time_local:$time_local\t'
            'method:$request_method\t'
            'uri:$request_uri\t'
            'host:$host\t'
            'status:$status\t'
            'bytes_sent:$body_bytes_sent\t'
            'referer:$http_referer\t'
            'useragent:$http_user_agent\t'
            'forwardedfor:$http_x_forwarded_for\t'
            'request_time:$request_time';
    access_log	/var/log/nginx/access.log main;
    server {
        listen       80;
        server_name  _;
        location / {
            root   html;
            index  index.html index.htm;
        }
    }
    include /etc/nginx/virtualhost/virtualhost.conf;
    }
virtualhost.conf: |
    upstream app {
    server localhost:8080;
    keepalive 1024;
    }
    server {
    listen 80 default_server;
    root /usr/local/app;
    access_log /var/log/nginx/app.access_log main;
    error_log /var/log/nginx/app.error_log;
    location / {
        proxy_pass http://app/;
        proxy_http_version 1.1;
    }
    }
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;[Nginx Deployment]&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;apiVersion: v1
kind: ConfigMap
metadata:
name: nginx-conf
data:
nginx.conf: |
    user nginx;
    worker_processes  3;
    error_log  /var/log/nginx/error.log;
    events {
    worker_connections  10240;
    }
    http {
    log_format  main
            'remote_addr:$remote_addr\t'
            'time_local:$time_local\t'
            'method:$request_method\t'
            'uri:$request_uri\t'
            'host:$host\t'
            'status:$status\t'
            'bytes_sent:$body_bytes_sent\t'
            'referer:$http_referer\t'
            'useragent:$http_user_agent\t'
            'forwardedfor:$http_x_forwarded_for\t'
            'request_time:$request_time';
    access_log	/var/log/nginx/access.log main;
    server {
        listen       80;
        server_name  _;
        location / {
            root   html;
            index  index.html index.htm;
        }
    }
    include /etc/nginx/virtualhost/virtualhost.conf;
    }
virtualhost.conf: |
    upstream app {
    server localhost:8080;
    keepalive 1024;
    }
    server {
    listen 80 default_server;
    root /usr/local/app;
    access_log /var/log/nginx/app.access_log main;
    error_log /var/log/nginx/app.error_log;
    location / {
        proxy_pass http://app/;
        proxy_http_version 1.1;
    }
    }
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;[Nginx Service]&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;apiVersion: v1
kind: Service
metadata:
name: nginx-svc
labels:
    app: nginx
spec:
ports:
- port: 80  # Service의 포트
    targetport: 80  # Pod의 포트
    protocol: TCP
selector:
    app: nginx
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;참고 : [https://hub.docker.com/&lt;em&gt;/nginx](https://hub.docker.com/&lt;/em&gt;/nginx)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;nginx-forward-proxy-설정&quot;&gt;Nginx Forward Proxy 설정&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/48921522/using-nginx-as-forward-proxy-in-kubernetes&quot;&gt;https://stackoverflow.com/questions/48921522/using-nginx-as-forward-proxy-in-kubernetes&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;참고: &lt;a href=&quot;https://gist.github.com/petitviolet/d36f33d145d0bbf4b54eb187b79d0244&quot;&gt;https://gist.github.com/petitviolet/d36f33d145d0bbf4b54eb187b79d0244&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 22 Jun 2022 11:00:00 +0900</pubDate>
        <link>https://ga0-lee.github.io/posts/Nginx1/</link>
        <guid isPermaLink="true">https://ga0-lee.github.io/posts/Nginx1/</guid>
        
        <category>k8s</category>
        
        <category>nginx</category>
        
        
        <category>Nginx</category>
        
      </item>
    
      <item>
        <title>ArgoCD를 K8s에 배포하기</title>
        <description>&lt;h2 id=&quot;argocd&quot;&gt;ArgoCD&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Argo CD는 쿠버네티스 환경에서 지속적 전달을 통해 서비스를 배포하기 위한 전략을 도와주는 오픈소스 툴킷이다.&lt;/li&gt;
  &lt;li&gt;Argo CD는 쿠버네티스 클러스터 내부에 Pod 형태로 배포된다.&lt;/li&gt;
  &lt;li&gt;Argo CD는 &lt;strong&gt;특정 원격 저장소(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GitOps Repository&lt;/code&gt;)&lt;/strong&gt;의 내용을 감지하여 내용의 변경사항(Diff)이 발견되면 이를 사용자에게 알려주고 반영할지 여부를 물어본다.
    &lt;ul&gt;
      &lt;li&gt;특정 원격 저장소 : GitHub, Bitbucket, 또는 Gitlab과 같은 원격 Repository 안에 쿠버네티스에서 배포나 서비스 설정을 위해 사용하는 매니페스트 리소스(=yaml 파일)들을 관리하는 원격 저장소&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;prequisite&quot;&gt;Prequisite&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;AWS EKS 클러스터 배포&lt;/li&gt;
  &lt;li&gt;Kubectl 설치&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;argocd-설치&quot;&gt;ArgoCD 설치&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# argocd 네임스페이스 생성 &lt;/span&gt;
kubectl create namespace argocd
  
&lt;span class=&quot;c&quot;&gt;# Argo CD 배포&lt;/span&gt;
kubectl apply &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; argocd &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; &amp;lt;https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml&amp;gt;

&lt;span class=&quot;c&quot;&gt;# Argo CD API Server에서 외부 통신을 할 수 있도록 Argo CD의 Service의 Type을 Load Balancer로 변경(AWS에서는 Classic Load Balancer로 배포됨)&lt;/span&gt;
kubectl patch svc argocd-server &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; argocd &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{&quot;spec&quot;: {&quot;type&quot;: &quot;LoadBalancer&quot;}}'&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Argo CD API Server가 대시보드를 제공한다.&lt;/p&gt;

    &lt;p&gt;⇒ 해당 Pod의 서비스를 통해 외부 접속을 해야 함 ⇒ Service 타입 LoadBalancer로 변경한다. (default는 ClusterIP이다)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;argo-cd-cli-설치&quot;&gt;Argo CD CLI 설치&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;curl &lt;span class=&quot;nt&quot;&gt;-LO&lt;/span&gt; https://github.com/argoproj/argo-cd/releases/download/v1.4.2/argocd-linux-amd64
&lt;span class=&quot;nb&quot;&gt;chmod &lt;/span&gt;u+x argocd-linux-amd64
&lt;span class=&quot;nb&quot;&gt;sudo mv &lt;/span&gt;argocd-linux-amd64 /usr/local/bin/argocd

&lt;span class=&quot;c&quot;&gt;## CLI 찾지 못하는 경우 Path 등록&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/bin:&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'export PATH=/usr/local/bin:$PATH'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.bashrc

&lt;span class=&quot;c&quot;&gt;## 설치 확인&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;argocd 
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Argo CD CLI는 Argo CD API Server에게 명령을 전달하여 Argo CD를 제어한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;argo-cd-초기-admin-계정-설정&quot;&gt;Argo CD 초기 Admin 계정 설정&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;ARGOCD_SERVER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;kubectl get pods &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; argocd &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; app.kubernetes.io/name&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;argocd-server &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; name | &lt;span class=&quot;nb&quot;&gt;cut&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; 2&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; 
&lt;span class=&quot;nv&quot;&gt;ARGOCD_SERVER_HOST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;kubectl get svc argocd-server &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; json &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; argocd | jq &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'.status.loadBalancer.ingress[0].hostname'&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# argocd 커맨드라인 인터페이스는 HTTP2/gRPC 프로토콜을 통해 통신하므로 &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 로드밸런서 혹은 외부 통신을 담당하는 라우터가 HTTP2/gRPC 프로토콜을 완벽히 지원해야함.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 하지만 AWS에서 제공하는 ALB 혹은 Classic LB는 HTTP2/gRPC 프로토콜을 완벽하게 지원하지 않기 때문에&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# --grpc-web 이라는 옵션을 추가적으로 붙여줘야 함.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;argocd login &amp;lt;ARGOCD_SERVER_HOST&amp;gt;:80 &lt;span class=&quot;nt&quot;&gt;--grpc-web&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# AWS EKS 혹은 HTTP2/gRPC 프로토콜을 완벽히 지원해 주지 않는 로드밸런서만 해당&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 그 외의 경우&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;argocd login &amp;lt;ARGOCD_SERVER_HOST&amp;gt;

WARNING: server certificate had error: x509: certificate is valid &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;localhost, argocd-server, argocd-server.argocd, argocd-server.argocd.svc, argocd-server.argocd.svc.cluster.local, 
not a123456dd12ab11baba0a123a1234567-1234567890.ap-northeast-2.elb.amazonaws.com. Proceed insecurely &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;y/n&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;? y
Username: admin
Password: &lt;span class=&quot;c&quot;&gt;# ARGOCD_SERVER와 동일&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;'admin'&lt;/span&gt; logged &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;successfully
Context &lt;span class=&quot;s1&quot;&gt;'a123456dd12ab11baba0a123a1234567-1234567890.ap-northeast-2.elb.amazonaws.com:80'&lt;/span&gt; updated

&lt;span class=&quot;c&quot;&gt;# -------------------------------&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# default 계정 정보는 아래와 같음&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# username : admin&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# password : ARGOCD_SERVER와 동일&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# -------------------------------&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Argo CD 비밀번호 변경&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;argocd account update-password
&lt;span class=&quot;k&quot;&gt;***&lt;/span&gt; Enter current password: &lt;span class=&quot;c&quot;&gt;# ARGOCD_SERVER와 동일&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;***&lt;/span&gt; Enter new password: &lt;span class=&quot;c&quot;&gt;# 변경할 비밀번호 입력&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;***&lt;/span&gt; Confirm new password: &lt;span class=&quot;c&quot;&gt;# 변경할 비밀번호 재입력(확인)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Argo CD Endpoint&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;kubectl get svc argocd-server &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; argocd &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; json | jq &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'.status.loadBalancer.ingress[0].hostname'&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;초기 계정 설정 후 브라우저를 통해 Load Balancer의 Endpoint로 접속하여 Argo CD 대시보드로 접속할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;⇒ 위에서 설정한 계정으로 로그인&lt;/p&gt;

&lt;h3 id=&quot;repository-설정&quot;&gt;Repository 설정&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://medium.com/finda-tech/eks-cluster%EC%97%90-argo-cd-%EB%B0%B0%ED%8F%AC-%EB%B0%8F-%EC%84%B8%ED%8C%85%ED%95%98%EB%8A%94-%EB%B2%95-eec3bef7b69b&quot;&gt;https://medium.com/finda-tech/eks-cluster%EC%97%90-argo-cd-%EB%B0%B0%ED%8F%AC-%EB%B0%8F-%EC%84%B8%ED%8C%85%ED%95%98%EB%8A%94-%EB%B2%95-eec3bef7b69b&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;webhook&quot;&gt;Webhook&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Webhook이란 특정 이벤트가 발생하였을 때 타 서비스나 응용프로그램으로 알림을 보내는 기능이다.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;기본적으로 Argo CD에서는 3분 뒤에 Repository를 polling 하여 manifest의 업데이트를 감지한다&lt;/p&gt;

    &lt;p&gt;⇒ Webhook 기능을 이용하면 Repository에 변경사항을 Push 하면 Webhook 이벤트가 트리거 되어 바로 Argo CD에서 Sync 되며 Webhook request log에서 확인 가능하다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Wed, 22 Jun 2022 11:00:00 +0900</pubDate>
        <link>https://ga0-lee.github.io/posts/ArgoCD1/</link>
        <guid isPermaLink="true">https://ga0-lee.github.io/posts/ArgoCD1/</guid>
        
        <category>k8s</category>
        
        <category>ArgoCD</category>
        
        
        <category>CICD</category>
        
        <category>ArgoCD</category>
        
      </item>
    
      <item>
        <title>Terraform으로 Infra 구성하기 No.4(Terraform - Attribute/Dependency/Output)</title>
        <description>&lt;h2 id=&quot;resource-attribute&quot;&gt;Resource Attribute&lt;/h2&gt;
&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;Resource의 argument 값을 다른 resource의 argument 값으로 지정할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[main.tf]&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;resource &quot;local_file&quot; &quot;pet&quot; {
filename = var.filename
content = &quot;My favorite pet is ${random_pet.my-pet.id}&quot;
}

resource &quot;random_pet&quot; &quot;my-pet&quot; {
prefix = var.prefix
separator = var.separator
length = var.length
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;=&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;random_pet&lt;/code&gt;인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my-pet resource&lt;/code&gt;의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt;를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;local_file&lt;/code&gt;인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pet resource&lt;/code&gt;의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;content&lt;/code&gt; 값으로 넣어주었다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;config 파일에는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my-pet&lt;/code&gt;의 id가 없지만 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terraform apply&lt;/code&gt;를 실행할 경우 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;random&lt;/code&gt; provider는 지정해준 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;argument&lt;/code&gt;들을 가지고 id를 만든다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;resource-dependencies&quot;&gt;Resource Dependencies&lt;/h2&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;implicit-dependency&quot;&gt;Implicit Dependency&lt;/h3&gt;
&lt;p&gt;[main.tf]&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;resource &quot;local_file&quot; &quot;pet&quot; {
filename = var.filename
content = &quot;My favorite pet is ${random_pet.my-pet.id}&quot;
}

resource &quot;random_pet&quot; &quot;my-pet&quot; {
prefix = var.prefix
separator = var.separator
length = var.length
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;${random_pet.my-pet.id}&lt;/code&gt; 과 같은 표현을 사용하여 다른 resource의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;argument&lt;/code&gt; 값을 가져다 쓸 수 있다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terraform apply&lt;/code&gt; 를 실행하게 되면 random_pet인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my-pet&lt;/code&gt;이 먼저 생성되고 그 다음으로 local_file인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pet&lt;/code&gt;이 생성된다. 삭제의 경우에는 그 반대.&lt;/li&gt;
  &lt;li&gt;이렇게 의존성을 갖게 하는 표현을 사용하여 의존성이 생기는 경우를 &lt;strong&gt;Implicit Dependency&lt;/strong&gt; (암시적 의존성)라고 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;explicit-dependency&quot;&gt;Explicit Dependency&lt;/h3&gt;
&lt;p&gt;[main.tf]&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;resource &quot;local_file&quot; &quot;pet&quot; {
filename = var.filename
content = &quot;My favorite pet is my dog&quot;
depends_on = [
  random_pet.my-pet
]
}

resource &quot;random_pet&quot; &quot;my-pet&quot; {
prefix = var.prefix
separator = var.separator
length = var.length
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;위와 같이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;depends_on&lt;/code&gt;으로 의존성을 직접 명시하여 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;local_file.pet&lt;/code&gt;이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;random_pet.my-pet&lt;/code&gt; 보다 나중에 생기게 할 수 있다.&lt;/li&gt;
  &lt;li&gt;이렇게 직접 명시하여 의존성을 정하는 경우 &lt;strong&gt;Explicit Dependency&lt;/strong&gt; (명시적 의존성) 라고 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;output-variable&quot;&gt;Output Variable&lt;/h2&gt;
&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;Output Variable을 사용하면 Provisioning된 Resource의 세부사항을 빠르게 확인할 수 있다.&lt;/li&gt;
  &lt;li&gt;Ansible이나 Shell script의 config에서 사용할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;[예시]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;[main.tf]&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;resource &quot;random_pet&quot; &quot;my-pet&quot; {
  length = var.length 
}

output &quot;pet-name&quot; {
  value = random_pet.my-pet.id
  description = &quot;Record the value of pet ID generated by the random_pet resource&quot;
}

resource &quot;local_file&quot; &quot;welcome&quot; {
  filename = &quot;/root/message.txt&quot;
  content = &quot;Welcome to Kodekloud.&quot;
}

output &quot;welcome_message&quot; {
  value = local_file.welcome.content
  description = &quot;Welcome message from local_file welcome&quot;
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;[variable.tf]&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;variable &quot;prefix&quot; {
  default = &quot;Mrs&quot;
}

variable &quot;separator&quot; {
        default = &quot;.&quot;
}

variable &quot;length&quot; {
        default = &quot;1&quot;
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;output&lt;/code&gt; 블럭을 생성하여 출력할 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;variable&lt;/code&gt;을 지정한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terraform init -&amp;gt; terraform plan -&amp;gt; terraform apply&lt;/code&gt; 로 적용하면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;output&lt;/code&gt; 값도 출력된다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terraform output&lt;/code&gt;을 통해 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;output&lt;/code&gt; 블럭에서 지정한 값을 확인할 수 있다.
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;명령어 실행 결과&lt;/p&gt;

        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;  iac-server $ terraform output
  pet-name = ant
  welcome_message = Welcome to Kodekloud.
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 10 May 2022 11:00:00 +0900</pubDate>
        <link>https://ga0-lee.github.io/posts/TF4/</link>
        <guid isPermaLink="true">https://ga0-lee.github.io/posts/TF4/</guid>
        
        <category>iac</category>
        
        <category>terraform</category>
        
        
        <category>IaC</category>
        
        <category>Terraform</category>
        
      </item>
    
      <item>
        <title>Terraform으로 Infra 구성하기 No.3(Terraform - Variable)</title>
        <description>&lt;h2 id=&quot;variable의-필요성&quot;&gt;Variable의 필요성&lt;/h2&gt;
&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;value를 하드코딩으로 작성하면 재사용성이 없어지기 때문에 IaC의 목적인 재사용성을 높이기 위해 변수를 사용한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;[hard codinf value - main.tf]&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;    resource &quot;local_file&quot; &quot;pet&quot; {
        filename = &quot;/root/pets.txt&quot;
        content = &quot;We love pets!&quot;
    }
    
    resource &quot;random_pet&quot; &quot;my-pet&quot; {
        prefix = &quot;Mrs&quot;  
        separator = &quot;.&quot;  
        length = &quot;1&quot;  
    }
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;=&amp;gt; Argument의 값들이 고정되어 있기 때문에 재사용이 어렵다.&lt;/p&gt;

&lt;h2 id=&quot;variable-사용법&quot;&gt;Variable 사용법&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;[variables.tf]&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;variable &quot;filename&quot; {
    default = &quot;/root/pets.txt&quot;
}
variable &quot;content&quot; {
    default = &quot;We love pets!&quot;
}
variable &quot;prefix&quot; {
    default = &quot;Mrs&quot;
}
variable &quot;separator&quot; {
    default = &quot;.&quot;
}
variable &quot;length&quot; {
    default = &quot;1&quot;
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;[main.tf]&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;resource &quot;local_file&quot; &quot;pet&quot; {
    filename = var.filename
    content = var.content
}

resource &quot;random_pet&quot; &quot;my-pet&quot; {
  prefix = var.prefix
  separator = var.separator
  length = var.length
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;variables.tf&lt;/code&gt; 파일을 따로 작성한 후 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main.tf&lt;/code&gt;에서 해당 variable로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;argument&lt;/code&gt; 값을 변경한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terraform apply&lt;/code&gt; 실행시 하드코딩을 했을 경우와 동일하게 적용된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;variable-update&quot;&gt;Variable Update&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;variables.tf&lt;/code&gt; 의 내용만 변경한 후 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terraform apply&lt;/code&gt; 명령어를 실행하면 변경한 값으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main.tf&lt;/code&gt;의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;argument&lt;/code&gt; 값이 변경된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;variabletf-파일-구성&quot;&gt;Variable.tf 파일 구성&lt;/h2&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;기본-구성&quot;&gt;기본 구성&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;variable &quot;변수 이름&quot; {
    default = &quot;기본 값&quot;
    type = any(default)/string/number/bool(true/false) (선택요소임)
    description = &quot;변수에 대한 설명&quot; (선택요소임)
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;### Type의 종류&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;any&lt;/strong&gt; : 기본&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;string&lt;/strong&gt; : 문자열
    &lt;ul&gt;
      &lt;li&gt;default = “I’m learning terraform”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;number&lt;/strong&gt; : 숫자
    &lt;ul&gt;
      &lt;li&gt;defualt = 1&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;bool&lt;/strong&gt; : 참/거짓
    &lt;ul&gt;
      &lt;li&gt;defualt = true/false&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;list&lt;/strong&gt; : 인덱스를 가진 여러 개의 값
    &lt;ul&gt;
      &lt;li&gt;defualt = [“dog”, “cat”, “bird”] -&amp;gt; index= [0,1,2]&lt;/li&gt;
      &lt;li&gt;main.tf에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;변수.인덱스&lt;/code&gt;를 통해 argument 값을 지정&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;list(string) / list(number)&lt;/code&gt;와 같이 list의 type을 지정할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;list 예시&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;[variables.tf]&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;variable &quot;pets&quot; {
default = [&quot;dog&quot;, &quot;cat&quot;, &quot;bird&quot;] 
type = list
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;[main.tf]&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;resource &quot;local_file&quot; &quot;pet&quot; {
  pets = var.pets[0]
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;map&lt;/strong&gt; : 여러 개의 key &amp;amp; value 쌍
    &lt;ul&gt;
      &lt;li&gt;map도 list처럼 type을 지정할 수 있다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map(string) / map(number)&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;map 예시&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;[variables.tf]&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;variable &quot;file-content&quot; {
  type = map
  default = {
    &quot;statement1&quot; = &quot;we love pets&quot;
    &quot;statement2&quot; = &quot;we love animals&quot;
  }
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;[main.tf]&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;resource &quot;local_file&quot; &quot;pet&quot; {
  content = var.file-content[&quot;statement2&quot;]
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;set&lt;/strong&gt; : 중복되지 않는 여러 개의 값. 인덱스가 있음.
    &lt;ul&gt;
      &lt;li&gt;list와 동일한 구조지만 다른 점은 set은 중복된 값을 가질 수 없다는 점&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;set 틀린 예시&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;[variables.tf]&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;variable &quot;pets&quot; {
default = [&quot;dog&quot;, &quot;cat&quot;, &quot;bird&quot;, &quot;dog&quot;] 
type = list
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;=» 중복된 값이 있으므로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terraform apply&lt;/code&gt; 를 하면 에러가 발생한다.&lt;/p&gt;

&lt;p&gt;[main.tf]&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;resource &quot;local_file&quot; &quot;pet&quot; {
  pets = var.pets[0]
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;object&lt;/strong&gt; : 각기 다른 type을 가진 여러 개의 key &amp;amp; value 쌍.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;object 예시&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;[variables.tf]&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;variable &quot;bella&quot; {
  type = object({
      name = string
      color = string
      age = number
      food = list(string)
      favorite_pet = bool
  )}
  default = {
      name = &quot;bella&quot;
      color = &quot;brown&quot;
      age = 7
      food = [&quot;fish&quot;, &quot;chicken&quot;, &quot;turkey&quot;]
      favorite_pet = true
  }
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;[main.tf]&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;resource &quot;local_file&quot; &quot;pet&quot; {
  name = var.bella.name
  color = var.bella.color
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;tuples&lt;/strong&gt; : list 형식으로 각기 다른 type을 가진 여러 개의 값을 나열&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;tuples 예시&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;[variables.tf]&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;variable &quot;kitty&quot; {
type = tuple([string, number, bool])
default = [&quot;cat&quot;, 7, true] 

}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;[main.tf]&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;resource &quot;local_file&quot; &quot;pet&quot; {
  pets = var.pets[0]
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;input-variable-방식-변수-값-입력-방식&quot;&gt;Input Variable 방식 (변수 값 입력 방식)&lt;/h2&gt;
&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;variables.tf&lt;/code&gt; 파일에 변수만 지정해 놓은 후 값은 따로 넣어주는 방식이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;command-line-flags-terraform-명령어로-입력&quot;&gt;command line flags (terraform 명령어로 입력)&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;  terrafom apply -var &quot;filename=/root/pets.txt&quot; -var &quot;content=We love pets!&quot; -var &quot;prefix=Mrs&quot; -var &quot;separator=.&quot; -var &quot;length=2&quot;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;environment-variables-환경변수-지정&quot;&gt;Environment Variables (환경변수 지정)&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;  export TF_VAR_filename=&quot;/root/pets.txt&quot;
  export TF_VAR_content=&quot;We love pets!&quot;
  export TF_VAR_prefix=&quot;Mrs&quot;
  export TF_VAR_separator=&quot;.&quot;
  export TF_VAR_length=&quot;2&quot;
  terraform apply
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;variable-definition-files-변수-지정-파일-따로-생성&quot;&gt;Variable Definition Files (변수 지정 파일 따로 생성)&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;[terraform.tfvars]&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;filename= &quot;/root/pets.txt&quot;
content = &quot;We love pets!&quot;
prefix = &quot;Mrs&quot;
separator = &quot;.&quot;
length = &quot;2&quot;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;=&amp;gt; 이렇게 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.tfvars/.tfvars.json&lt;/code&gt; 또는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*.auto.tfvars/*.auto.tfvars.json&lt;/code&gt; 파일을 만든 후 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terraform apply&lt;/code&gt; 명령어를 실행하면 된다.&lt;/p&gt;

&lt;h3 id=&quot;variable-적용-순서-및-우선순위&quot;&gt;Variable 적용 순서 및 우선순위&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;위에서 확인한 변수 적용 방법들을 동시에 사용했을 경우 적용되는 순서는 다음과 같다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;[적용 순서]&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Environment Variables&lt;/li&gt;
  &lt;li&gt;terraform.tfvars&lt;/li&gt;
  &lt;li&gt;*.auto.tfvars (alphabetical order)&lt;/li&gt;
  &lt;li&gt;-var or -var-file (command-line-flags)
    &lt;ul&gt;
      &lt;li&gt;위의 순서로 하나씩 적용되는데 순서와 우선순위는 반비례되기 때문에 먼저 적용된 것은 그 다음에 적용되는 것에 의해 덮어씌워진다.
=&amp;gt; 즉, 위의 4가지 방법으로 변수가 적용된다면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;command-line-flags&lt;/code&gt;로 지정된 변수가 적용되는 것이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;[우선순위]&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;-var or -var-file (command-line-flags)&lt;/li&gt;
  &lt;li&gt;*.auto.tfvars (alphabetical order)&lt;/li&gt;
  &lt;li&gt;terraform.tfvars&lt;/li&gt;
  &lt;li&gt;Environment Variables&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Tue, 10 May 2022 10:00:00 +0900</pubDate>
        <link>https://ga0-lee.github.io/posts/TF3/</link>
        <guid isPermaLink="true">https://ga0-lee.github.io/posts/TF3/</guid>
        
        <category>iac</category>
        
        <category>terraform</category>
        
        
        <category>IaC</category>
        
        <category>Terraform</category>
        
      </item>
    
  </channel>
</rss>