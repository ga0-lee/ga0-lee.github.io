안녕하세요.
자세한 설명으로 회신해주셔서 감사드립니다.

공유해주신 내용을 확인했을 때 NLB에 Target으로 등록되어 있는 인스턴스에서 NLB로 호출을 할 때, 그리고 그 트래픽이 자기 자신한테 돌아가는 경우에만 Connection 이슈가 발생하고 있는 것으로 이해하였습니다.

이와 관련하여 리서치를 해보니 다음과 같이 NLB에서 Client IP preservation 기능이 활성화된 경우 Loopback을 허용하지 않아 Connection timeout이 발생한다는 내용 [1]을 확인할 수 있었습니다.

"Load balancers with client IP preservation enabled do not support hairpinning or loopback. If an instance is a client of a load balancer that it's registered with, and it has client IP preservation enabled, the connection succeeds only if the request is routed to a different instance. Otherwise, the source and destination IP addresses are the same and the connection times out."

Instance mode로 NLB를 생성 시 Default로 Client IP preservation [2]이 활성화되는데 이로 인해 Source IP와 Destinaion의 IP가 동일한 Private IP로 확인되기 때문에 OS에서 Invalid packet 처리를 해버려 Connection이 실패를 하는 것 입니다.

관련하여 테스트를 진행해보았고 다음과 같은 두가지 방법으로 해결할 수 있었습니다.

1) Client IP preservation 비활성화

apiVersion: v1
kind: Service
metadata:
  name: sample-nlb-svc
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: external
    service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: instance
    service.beta.kubernetes.io/aws-load-balancer-scheme: internal
    service.beta.kubernetes.io/aws-load-balancer-target-group-attributes: preserve_client_ip.enabled=false
    ...
    (생략)

위와 같이 Attribute를 설정하여 IP preservation을 Disable하는 경우 NLB를 통해 전달되는 패킷은 Source ip를 NLB의 Private IP로 가져가게 됩니다. 따라서, 같은 인스턴스에서 요청된 트래픽에 대해서도 Connection 이 정상적으로 이루어지는 것을 확인할 수 있었습니다.

2) IP mode 사용

    service.beta.kubernetes.io/aws-load-balancer-type: external
    service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: ip
    service.beta.kubernetes.io/aws-load-balancer-scheme: internal

NLB의 Target type을 IP mode로 사용하는 경우 Destination IP가 인스턴스의 Private IP가 아니라 Pod IP로 세팅되기 때문에 같은 인스턴스 내에서 요청된 트래픽이 정상적으로 처리됩니다.

현재는 NLB 타입의 Service를 생성 시 AWS Load balancer controller를 사용하지 않고 Kubernetes의 In-tree Service controller를 사용하고 계신 것으로 보여집니다. AWS에서는 ALB/NLB에 대한 오퍼레이션을 유연하게 지원하고자 AWS Load balancer controller라는 오픈소스 프로젝트 [3]를 통해 Kubernetes의 기본 service controller보다 AWS 리소스에 대해 더 다양한 기능을 제공하고 있습니다. 위의 두가지 방안도 AWS loadbalancer controller의 Annotation 기준으로 설명을 드린 것입니다. Kubernetes의 service controller에서는 NLB타입일 경우 instance mode만 지원하고 있고, 제한된 일부 attribute 에 대해서만 수정할 수 있도록 annotation을 제공하고 있습니다.

따라서, 말씀하신 이슈를 해결하기 위해서는 AWS Load balancer controller를 설치하시고 Service를 생성할 때 위와 같이 'service.beta.kubernetes.io/aws-load-balancer-type: external' annotation을 추가하여 AWS Load balancer controller를 이용하여 NLB를 생성 [4]하시기 바랍니다.

현재 NLB를 유지한 채로 이슈를 해결하시고자 한다면 NLB를 호출하는 Client를 Target group에 속한 인스턴스에 두지 않도록 Pod의 배치를 변경하는 것도 한가지 방법이 될 수 있습니다.

답변이 도움이 되었길 바라고 관련하여 문의사항이 있으시면 연락주시기 바랍니다.
감사합니다.

References:
[1] https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-troubleshooting.html#loopback-timeout 
[2] Client IP preservation: https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-target-groups.html#client-ip-preservation 
[3] https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.4/  
[4] https://docs.aws.amazon.com/eks/latest/userguide/network-load-balancing.html 


We value your feedback. Please share your experience by rating this and other correspondences in the AWS Support Center. You can rate a correspondence by selecting the stars in the top right corner of the correspondence.

Best regards,
Bohyun L.
Amazon Web Services
